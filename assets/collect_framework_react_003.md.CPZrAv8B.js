import{_ as a,c as t,o as r,ae as i}from"./chunks/framework.z0sZ1NT9.js";const p=JSON.parse('{"title":"003 redux","description":"","frontmatter":{"title":"003 redux","date":"2021-08-19T00:00:00.000Z","categories":["React"],"tags":["React"],"sidebar":"auto"},"headers":[],"relativePath":"collect/framework/react/003.md","filePath":"collect/framework/react/003.md"}'),l={name:"collect/framework/react/003.md"};function s(o,e,d,u,c,n){return r(),t("div",null,e[0]||(e[0]=[i('<h2 id="_1-为什么需要redux" tabindex="-1">1. 为什么需要redux <a class="header-anchor" href="#_1-为什么需要redux" aria-label="Permalink to &quot;1. 为什么需要redux&quot;">​</a></h2><p>JavaScript的应用程序越来越复杂：</p><ul><li>JavaScript需要管理的状态越来越多，越来越复杂；</li><li>这些状态包括服务器返回的数据、缓存数据、用户操作产生的数据等等，也包括一些UI的状态，比如某些元素是否被选中，是否显示加载动效，当前分页。</li></ul><p>管理不断变化的state是非常困难的：</p><ul><li>状态之间相互会存在依赖</li><li>当应用程序复杂时，state在什么时候、因为什么原因发生了变化，发生了怎样的变化，会变得非常难以控制和追踪。</li></ul><p>React是在视图层帮助我们解决了DOM渲染的问题，但是state依然是我们自己来管理。</p><p>Redux就是一个帮助我们管理state的容器：<strong>Redux是一个JavaScript的状态容器，提供了可预测的状态管理</strong>。</p><p>Redux除了和React一起使用，它也可以和其它界面库一起来使用（比如Vue），并且它非常小（包括依赖在内，只有2kb），不像Vue的VueX，是强依赖于Vue的。</p><h2 id="_2-redux应用场景" tabindex="-1">2. Redux应用场景 <a class="header-anchor" href="#_2-redux应用场景" aria-label="Permalink to &quot;2. Redux应用场景&quot;">​</a></h2><ul><li>随着 JavaScript 单页应用开发日趋复杂,管理不断变化的 state 非常困难；</li><li>Redux的出现就是为了解决state里的数据问题；</li><li>在React中，数据在组件中是单向流动的；</li><li>数据从一个方向父组件流向子组件(通过props)，由于这个特征，两个非父子关系的组件（或者称作兄弟组件）之间的通信就比较麻烦；</li></ul><div class="img-box"> ![图片加载失败](../../assets/images/react/redux-wrong.png) </div><h2 id="_3-redux设计思想" tabindex="-1">3. Redux设计思想 <a class="header-anchor" href="#_3-redux设计思想" aria-label="Permalink to &quot;3. Redux设计思想&quot;">​</a></h2><ul><li>Redux是将整个应用状态存储到到一个地方，称为store；</li><li>里面保存一棵状态树state tree；</li><li>组件可以派发dispatch行为action给store,而不是直接通知其它组件；</li><li>其它组件可以通过订阅store中的状态(state)来刷新自己的视图；</li></ul><div class="img-box"> ![图片加载失败](../../assets/images/react/redux-flow.png) </div><h2 id="_4-redux三大原则" tabindex="-1">4. Redux三大原则 <a class="header-anchor" href="#_4-redux三大原则" aria-label="Permalink to &quot;4. Redux三大原则&quot;">​</a></h2><ul><li>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中；</li><li>State 是只读的，惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象 使用纯函数来执行修改，为了描述action如何改变state tree ，你需要编写 reducers；</li><li>单一数据源的设计让React的组件之间的通信更加方便，同时也便于状态的统一管理。</li></ul>',16)]))}const _=a(l,[["render",s]]);export{p as __pageData,_ as default};

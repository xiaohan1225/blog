import{_ as e,c as t,o as T,ae as r}from"./chunks/framework.DE6vaMEz.js";const d=JSON.parse('{"title":"005 HTTP的特点","description":"","frontmatter":{"title":"005 HTTP的特点","date":"2021-08-02T00:00:00.000Z","categories":["网络协议"],"tags":["HTTP"],"sidebar":"auto"},"headers":[],"relativePath":"collect/net/005.md","filePath":"collect/net/005.md"}'),l={name:"collect/net/005.md"};function o(i,a,p,n,P,s){return T(),t("div",null,a[0]||(a[0]=[r('<p>HTTP主要有5个特点：</p><ol><li>灵活可扩展</li><li>应用层协议</li><li>请求-应答模式</li><li>可靠传输</li><li>无状态</li></ol><h2 id="_1-灵活可扩展" tabindex="-1">1. 灵活可扩展 <a class="header-anchor" href="#_1-灵活可扩展" aria-label="Permalink to &quot;1. 灵活可扩展&quot;">​</a></h2><p><strong>首先， HTTP 协议是一个“灵活可扩展”的传输协议。</strong></p><p>HTTP的灵活可扩展体现在于，HTTP随着互联网的发展，逐渐添加了头字段、请求方法、版本号、状态码等特性，body也不局限于文本形式的TXT或HTML，而是能传输图片、音频视频等任意数据。比如对于报文来说，HTTP只规定了报文的基本格式，比如用空格分隔单词，用换行分隔字段，“header+body”等，而对报文里的各个组成部分都没有做严格的语法语义限制，开发者可任意定制。</p><h2 id="_2-可靠传输" tabindex="-1">2. 可靠传输 <a class="header-anchor" href="#_2-可靠传输" aria-label="Permalink to &quot;2. 可靠传输&quot;">​</a></h2><p>第二个特点， <strong>HTTP 协议是一个“可靠”的传输协议</strong>。</p><p>HTTP可靠传输的特点有由其下层的tcp提供的。</p><p>不过我们必须正确地理解“可靠”的含义，HTTP 并不能 100% 保证数据一定能够发送到另一端，在网络繁忙、连接质量差等恶劣的环境下，也有可能收发失败。“可靠”只是向使用者提供了一个“承诺”，会在下层用多种手段“尽量”保证数据的完整送达。</p><h2 id="_3-应用层协议" tabindex="-1">3. 应用层协议 <a class="header-anchor" href="#_3-应用层协议" aria-label="Permalink to &quot;3. 应用层协议&quot;">​</a></h2><p>第三个特点，<strong>HTTP 协议是一个应用层的协议</strong>。</p><p>在 TCP/IP 诞生后的几十年里，虽然出现了许多的应用层协议，但它们都仅关注很小的应用领域，局限在很少的应用场景。例如 FTP 只能传输文件、SMTP 只能发送邮件、SSH 只能远程登录等，在通用的数据传输方面“完全不能打”。</p><p>所以 HTTP 凭借着可携带任意头字段和实体数据的报文结构，以及连接控制、缓存代理等方便易用的特性，一出现就“技压群雄”，迅速成为了应用层里的“明星”协议。只要不太苛求性能，HTTP 几乎可以传递一切东西，满足各种需求，称得上是一个“万能”的协议。</p><h2 id="_4-请求-应答" tabindex="-1">4. 请求 - 应答 <a class="header-anchor" href="#_4-请求-应答" aria-label="Permalink to &quot;4. 请求 - 应答&quot;">​</a></h2><p>第四个特点，<strong>HTTP 协议使用的是请求 - 应答通信模式</strong>。</p><p>这个请求 - 应答模式是 HTTP 协议最根本的通信模型，通俗来讲就是“一发一收”“有来有去”，就像是写代码时的函数调用，只要填好请求头里的字段，“调用”后就会收到答复。</p><p>HTTP 的请求 - 应答模式也恰好契合了传统的 C/S（Client/Server）系统架构，请求方作为客户端、应答方作为服务器。所以，随着互联网的发展就出现了 B/S（Browser/Server）架构，用轻量级的浏览器代替笨重的客户端应用，实现零维护的“瘦”客户端，而服务器则摈弃私有通信协议转而使用 HTTP 协议。</p><h2 id="_5-无状态" tabindex="-1">5. 无状态 <a class="header-anchor" href="#_5-无状态" aria-label="Permalink to &quot;5. 无状态&quot;">​</a></h2><p>第五个特点，<strong>HTTP 协议是无状态的</strong>。</p><p>这个所谓的“状态”应该怎么理解呢？</p><p>“状态”其实就是客户端或者服务器里保存的一些数据或者标志，记录了通信过程中的一些变化信息。</p><p>你一定知道，TCP 协议是有状态的，一开始处于 CLOSED 状态，连接成功后是 ESTABLISHED 状态，断开连接后是 FIN-WAIT 状态，最后又是 CLOSED 状态。</p><p>这些“状态”就需要 TCP 在内部用一些数据结构去维护，可以简单地想象成是个标志量，标记当前所处的状态，例如 0 是 CLOSED，2 是 ESTABLISHED 等等。</p><p>再来看 HTTP，那么对比一下 TCP 就看出来了，在整个协议里没有规定任何的“状态”，客户端和服务器永远是处在一种“无知”的状态。建立连接前两者互不知情，每次收发的报文也都是互相独立的，没有任何的联系。收发报文也不会对客户端或服务器产生任何影响，连接后也不会要求保存任何信息。</p><p>“无状态”形象地来说就是“没有记忆能力”。比如，浏览器发了一个请求，说“我是小明，请给我 A 文件。”，服务器收到报文后就会检查一下权限，看小明确实可以访问 A 文件，于是把文件发回给浏览器。接着浏览器还想要 B 文件，但服务器不会记录刚才的请求状态，不知道第二个请求和第一个请求是同一个浏览器发来的，所以浏览器必须还得重复一次自己的身份才行：“我是刚才的小明，请再给我 B 文件。”</p><p>我们可以再对比一下 UDP 协议，不过它是无连接也无状态的，顺序发包乱序收包，数据包发出去后就不管了，收到后也不会顺序整理。而 HTTP 是有连接无状态，顺序发包顺序收包，按照收发的顺序管理报文。但不要忘了 HTTP 是“灵活可扩展”的，虽然标准里没有规定“状态”，但完全能够在协议的框架里给它“打个补丁”，增加这个特性。</p><h2 id="_6-其它特点" tabindex="-1">6. 其它特点 <a class="header-anchor" href="#_6-其它特点" aria-label="Permalink to &quot;6. 其它特点&quot;">​</a></h2><p>除了以上的五大特点，其实 HTTP 协议还可以列出非常多的特点，例如传输的实体数据可缓存可压缩、可分段获取数据、支持身份认证、支持国际化语言等。但这些并不能算是 HTTP 的基本特点，因为这都是由第一个“灵活可扩展”的特点所衍生出来的。</p><h2 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h2><ol><li>HTTP 是灵活可扩展的，可以任意添加头字段实现任意功能；</li><li>HTTP 是可靠传输协议，基于 TCP/IP 协议“尽量”保证数据的送达；</li><li>HTTP 是应用层协议，比 FTP、SSH 等更通用功能更多，能够传输任意数据；</li><li>HTTP 使用了请求 - 应答模式，客户端主动发起请求，服务器被动回复请求；</li><li>HTTP 本质上是无状态的，每个请求都是互相独立、毫无关联的，协议不要求客户端或服务器记录请求相关的信息。</li></ol>',30)]))}const c=e(l,[["render",o]]);export{d as __pageData,c as default};

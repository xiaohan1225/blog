import{_ as n,c as t,o as e,ae as l,j as i,a,t as h}from"./chunks/framework.BezmCoJM.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"collect/vue/vue面试题.md","filePath":"collect/vue/vue面试题.md"}'),k={name:"collect/vue/vue面试题.md"};function p(r,s,d,E,o,g){return e(),t("div",null,[s[8]||(s[8]=l(`<h2 id="一、说说你对vue的理解" tabindex="-1">一、说说你对vue的理解？ <a class="header-anchor" href="#一、说说你对vue的理解" aria-label="Permalink to &quot;一、说说你对vue的理解？&quot;">​</a></h2><p><code>vue</code> 是一个用于创建用户界面的开源 <code>JavaScript</code> 框架，它的特点如下：</p><h3 id="_1-1-声明式框架" tabindex="-1">1.1 声明式框架 <a class="header-anchor" href="#_1-1-声明式框架" aria-label="Permalink to &quot;1.1 声明式框架&quot;">​</a></h3><ul><li>早在JQ的时代编写的代码都是命令式的，命令式框架重要特点就是关注过程，</li><li>声明式框架更加关注结果。命令式的代码封装到了框架内部，过程靠框架来实现</li></ul><h3 id="_1-2-数据驱动-响应式数据" tabindex="-1">1.2 数据驱动/响应式数据 <a class="header-anchor" href="#_1-2-数据驱动-响应式数据" aria-label="Permalink to &quot;1.2 数据驱动/响应式数据&quot;">​</a></h3><p>通过 <code>Object.defineProperty（Vue 2</code> 或 <code>Proxy（Vue 3）</code> 实现数据劫持，数据变化时自动更新视图，开发者无需手动操作 DOM。</p><h3 id="_1-3-虚拟dom" tabindex="-1">1.3 虚拟DOM <a class="header-anchor" href="#_1-3-虚拟dom" aria-label="Permalink to &quot;1.3 虚拟DOM&quot;">​</a></h3><p>通过高效的 <code>Diff</code> 算法比对虚拟 <code>DOM</code> 的变化，最小化真实 <code>DOM</code> 操作，提升性能。</p><h3 id="_1-4-组件化" tabindex="-1">1.4 组件化 <a class="header-anchor" href="#_1-4-组件化" aria-label="Permalink to &quot;1.4 组件化&quot;">​</a></h3><p>将 UI 拆分为独立可复用的组件，每个组件包含自己的模板、逻辑和样式，通过组合组件构建复杂应用。</p><h3 id="_1-5-组件化" tabindex="-1">1.5 组件化 <a class="header-anchor" href="#_1-5-组件化" aria-label="Permalink to &quot;1.5 组件化&quot;">​</a></h3><p>提供 <code>v-if</code>、<code>v-for</code>、<code>v-bind</code>、<code>v-on</code> 等指令，以声明式方式增强 HTML 的功能。</p><h3 id="_1-6-渐进式框架" tabindex="-1">1.6 渐进式框架 <a class="header-anchor" href="#_1-6-渐进式框架" aria-label="Permalink to &quot;1.6 渐进式框架&quot;">​</a></h3><ul><li>渐进集成：可以从小规模功能（如静态页面交互）逐步扩展到完整的单页应用（SPA）。</li><li>灵活生态：核心库只关注视图层，但配合官方路由（Vue Router）、状态管理（Vuex/Pinia）、构建工具（Vite）等，能轻松扩展为全功能框架。</li></ul><p>就是你可以单独用 <code>vue</code> 的响应式构建静态页面，如果你需要状态管理，就上官方的状态管理工具 <code>Vuex/Pinia</code>，如果你需要构建一个应用，有多个页面，可以上官方路由 <code>Vue-router</code>，如果你需要一键生成项目，可以用官方的 <code>vue-cli</code> 一键创建项目。</p><h2 id="二、请说一下响应式数据的理解" tabindex="-1">二、请说一下响应式数据的理解？ <a class="header-anchor" href="#二、请说一下响应式数据的理解" aria-label="Permalink to &quot;二、请说一下响应式数据的理解？&quot;">​</a></h2><p><code>vue</code> 是通过数据驱动视图的，响应式指的是当数据发生变化时，使用到该数据的页面会自动更新。在表单中，可以通过响应式实现<strong>双向绑定</strong>，实现表单值和数据的<strong>双向同步</strong>。</p><h3 id="_2-1-基本原理" tabindex="-1">2.1 基本原理 <a class="header-anchor" href="#_2-1-基本原理" aria-label="Permalink to &quot;2.1 基本原理&quot;">​</a></h3><ol><li><strong>数据劫持</strong>：<code>vue2</code> 中使用 <code>Object.defineProperty</code> 对对象属性进行劫持，对数组则采用重写数组的七个方法<code>（push,shift,pop,splice,unshift,sort,reverse）</code>来实现劫持，而 <code>vue3</code> 则通过 <code>Proxy</code> API 可以天然对对象和数组实现数据劫持。</li><li><strong>依赖收集</strong>：在getter中收集依赖(谁在使用这个数据)。</li><li><strong>派发更新</strong>：在setter中通知所有依赖进行更新</li></ol><h3 id="_2-2-特点" tabindex="-1">2.2 特点 <a class="header-anchor" href="#_2-2-特点" aria-label="Permalink to &quot;2.2 特点&quot;">​</a></h3><ol><li>自动更新：数据变化时，依赖该数据的视图会自动更新。</li><li>深度监听：嵌套对象也会被递归转为响应式。</li><li>异步更新：Vue会异步执行DOM更新，提高性能。</li></ol><h3 id="_2-3-vue3-响应式改进" tabindex="-1">2.3 vue3 响应式改进 <a class="header-anchor" href="#_2-3-vue3-响应式改进" aria-label="Permalink to &quot;2.3 vue3 响应式改进&quot;">​</a></h3><p>使用Proxy代替Object.defineProperty：</p><ul><li>可以检测到对象属性的添加和删除</li><li>对数组的变化无需特殊处理</li><li>性能更好</li></ul><p>针对响应式可以做的性能优化（vue2）：</p><ul><li>对象层级过深，性能就会差，所以响应式尽量扁平化</li><li>不需要响应数据的内容不要放到 data 中</li><li>不需要更新的静态数据可以用 <code>Object.freeze()</code> 冻结数据</li></ul><h3 id="_2-4-注意事项" tabindex="-1">2.4 注意事项 <a class="header-anchor" href="#_2-4-注意事项" aria-label="Permalink to &quot;2.4 注意事项&quot;">​</a></h3><ol><li>对象新增属性：<code>vue 2</code> 中需要使用 <code>Vue.set</code> 或 <code>this.$set</code> 方法。</li><li>数组变化：<code>vue 2</code> 中直接通过索引修改或修改 <code>length</code> 属性不会触发响应，应使用变异方法(<code>push/pop/shift</code>等)或 <code>Vue.set</code>。</li><li>性能考量：响应式系统需要追踪依赖，大型对象可能会有性能开销。</li></ol><p>响应式系统让开发者可以专注于数据逻辑，而无需手动处理 DOM 更新，大大提高了开发效率。</p><h2 id="三、vue中模板编译原理" tabindex="-1">三、Vue中模板编译原理？ <a class="header-anchor" href="#三、vue中模板编译原理" aria-label="Permalink to &quot;三、Vue中模板编译原理？&quot;">​</a></h2><p>Vue 中的模板编译就是把我们写的 <code>template</code> 转换为渲染函数(render function) 的过程，它主要经历3个步骤：</p><ol><li><strong>解析（Parse）</strong>：将 template 模板转换成 ast 抽象语法树。</li><li><strong>优化（Optimize）</strong>：对静态节点做静态标记，减少 diff 过程中的比对。</li><li><strong>生成（Generate）</strong>：重新生成代码，将 ast 抽象语法数转化成可执行的渲染函数代码。</li></ol><h3 id="_3-1-解析阶段" tabindex="-1">3.1 解析阶段 <a class="header-anchor" href="#_3-1-解析阶段" aria-label="Permalink to &quot;3.1 解析阶段&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,34)),i("ul",null,[s[6]||(s[6]=i("li",null,"用 HTML 解析器将模板解析为 AST。",-1)),s[7]||(s[7]=i("li",null,"AST中用 js 对象描述模板，里面包含了元素类型、属性、子节点等信息。",-1)),i("li",null,[s[0]||(s[0]=a("解析指令（",-1)),s[1]||(s[1]=i("code",null,"v-for、v-if",-1)),s[2]||(s[2]=a("）和事件（",-1)),s[3]||(s[3]=i("code",null,"@click",-1)),s[4]||(s[4]=a("）、插值表达式",-1)),i("code",null,h(),1),s[5]||(s[5]=a("等 vue 语法。",-1))])]),s[9]||(s[9]=l(`<h3 id="_3-2-优化阶段" tabindex="-1">3.2 优化阶段 <a class="header-anchor" href="#_3-2-优化阶段" aria-label="Permalink to &quot;3.2 优化阶段&quot;">​</a></h3><ul><li>遍历上一步生成的 ast，标记静态节点，比如用 <code>v-once</code> 的节点，以及没有用到响应式数据的节点。</li><li>标记静态根节点，避免不必要的渲染。</li></ul><h3 id="_3-3-代码生成阶段" tabindex="-1">3.3 代码生成阶段 <a class="header-anchor" href="#_3-3-代码生成阶段" aria-label="Permalink to &quot;3.3 代码生成阶段&quot;">​</a></h3><p>vue2 解析结果：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      attrs: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message))])])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>_c</code>: 是 createElement 的别名，用于创建 VNode。</li><li><code>_v</code>: 创建文本 VNode。</li><li><code>_s</code>: 是 toString 的别名，用于将值转换为字符串。</li></ul><p>vue3 解析结果：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { toDisplayString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _toDisplayString, createElementVNode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _createElementVNode, openBlock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _openBlock, createElementBlock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _createElementBlock } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_openBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_createElementBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _createElementVNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_toDisplayString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_ctx.message), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* TEXT */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>_openBlock</code>: 开启一个&quot;block&quot;区域，用于收集动态子节点。</li><li><code>_createElementBlock</code>: 创建一个块级虚拟 DOM 节点。</li><li><code>_createElementVNode</code>: 创建一个普通虚拟 DOM 节点。</li><li><code>_toDisplayString</code>: 将响应式数据 _ctx.message 转换为显示字符串，或者处理 null/undefined 等值，确保它们能正确渲染为空白字符串。</li></ul><p>vue2在线编译：<a href="https://template-explorer.vuejs.org/" target="_blank" rel="noreferrer">https://template-explorer.vuejs.org/</a>。</p><p>vue3在线编译：<a href="https://v2.template-explorer.vuejs.org/" target="_blank" rel="noreferrer">https://v2.template-explorer.vuejs.org/</a>。</p><h3 id="运行时-编译-runtime-compiler-vs-仅运行时-runtime-only" tabindex="-1">运行时+编译(runtime-compiler) vs 仅运行时(runtime-only) <a class="header-anchor" href="#运行时-编译-runtime-compiler-vs-仅运行时-runtime-only" aria-label="Permalink to &quot;运行时+编译(runtime-compiler) vs 仅运行时(runtime-only)&quot;">​</a></h3><ol><li>完整版（运行时+编译）： <ul><li>包含编译模块，可以写 template 模版。</li><li>体积较大（～30kb）。</li></ul></li><li>仅运行时版本 <ul><li>需要在打包时使用 <code>vue-loader</code> 进行编译。</li><li>体积较小（～20kb）</li></ul></li></ol><p>平时开发项目推荐使用仅运行时(runtime-only)版本。</p><h3 id="编译后的特点" tabindex="-1">编译后的特点 <a class="header-anchor" href="#编译后的特点" aria-label="Permalink to &quot;编译后的特点&quot;">​</a></h3><ol><li>虚拟DOM：渲染函数生成的是虚拟DOM节点(VNode)。</li><li>响应式绑定：渲染函数中的变量会自动建立依赖关系。</li><li>性能优化：通过静态节点标记减少不必要的更新。</li></ol><h2 id="四、vue为什么需要虚拟dom" tabindex="-1">四、Vue为什么需要虚拟DOM？ <a class="header-anchor" href="#四、vue为什么需要虚拟dom" aria-label="Permalink to &quot;四、Vue为什么需要虚拟DOM？&quot;">​</a></h2><p>虚拟DOM（Virtual DOM）就是用 js 对象来描述真实 DOM，是对真实 DOM 的抽象。</p><h3 id="_4-1-性能优化" tabindex="-1">4.1 性能优化 <a class="header-anchor" href="#_4-1-性能优化" aria-label="Permalink to &quot;4.1 性能优化&quot;">​</a></h3><ul><li><strong>直接操作 DOM 代价高昂</strong>：浏览器 DOM 操作是非常消耗性能的。</li><li><strong>最小差异更新</strong>：通过比对新旧虚拟 DOM 节点，找出最小差异进行更新。</li><li><strong>批量更新</strong>：在数据修改后，异步批量更新。</li></ul><blockquote><p>虚拟DOM并不一定能提升性能，比如你就改了一个数据，vue还要走一遍 DOM diff 比对完后再去调用原生 DOM API去更新，这时候其实你直接通过原生DOM API 去更新肯定性能更高，但是虚拟 DOM 能保证性能的下限，在你的应用复杂且庞大的时候，不至于性能太差。</p></blockquote><h3 id="_4-2-跨平台" tabindex="-1">4.2 跨平台 <a class="header-anchor" href="#_4-2-跨平台" aria-label="Permalink to &quot;4.2 跨平台&quot;">​</a></h3><ul><li><strong>抽象层作用</strong>：虚拟 DOM 是对真实 DOM 的抽象表示。</li><li><strong>多端渲染</strong>：同一套虚拟 DOM 可以渲染到不同平台（Web、Native、Canvas等）。</li><li><strong>服务端渲染(SSR)</strong>：在没有真实 DOM 的环境下也能生成页面结构。</li></ul><h3 id="_4-3-声明式编程的优势" tabindex="-1">4.3 声明式编程的优势 <a class="header-anchor" href="#_4-3-声明式编程的优势" aria-label="Permalink to &quot;4.3 声明式编程的优势&quot;">​</a></h3><ul><li><strong>开发者友好</strong>：开发者只需关心数据状态，不必手动操作 DOM。</li><li><strong>自动优化</strong>：框架层面负责最高效的更新策略，开发者无需微观管理。</li></ul><h3 id="_4-4-与响应式系统的协同" tabindex="-1">4.4 与响应式系统的协同 <a class="header-anchor" href="#_4-4-与响应式系统的协同" aria-label="Permalink to &quot;4.4 与响应式系统的协同&quot;">​</a></h3><ul><li><strong>依赖追踪</strong>：虚拟 DOM 与 Vue 的响应式系统紧密结合。</li><li><strong>组件级更新</strong>：数据更改后，在组件级别进行页面更新。</li></ul><h2 id="五、vue中的diff原理" tabindex="-1">五、Vue中的diff原理 <a class="header-anchor" href="#五、vue中的diff原理" aria-label="Permalink to &quot;五、Vue中的diff原理&quot;">​</a></h2><p>Vue的diff算法是平级比较，不考虑跨级比较的情况。内部采用<strong>深度递归的方式 + 双指针</strong>的方式进行比较。</p><p>比较过程:</p><ol><li>先比较是否是相同节点。</li><li>相同节点比较属性,并复用老节点。</li><li>比较儿子节点，考虑老节点和新节点儿子的情况。</li><li>优化比较：头头、尾尾、头尾、尾头。</li><li>比对查找进行复用。</li></ol><p>Vue3 在这个比较过程的基础上增加了<strong>最长递增子序列</strong>实现diff算法。</p><ul><li>找出不需要移动的现有节点。</li><li>只对需要移动的节点进行操作。</li><li>最小化 DOM 操作次数。</li></ul><p>Vue3 的其它优化改进：</p><ol><li><strong>静态提升</strong>：将静态节点提升到渲染函数外部，避免重复创建。</li><li><strong>Patch Flag</strong>：标记动态绑定的类型，减少比较次数。</li><li><strong>缓存事件处理函数</strong>：避免不必要的更新。</li><li><strong>Block Tree</strong>：将动态节点组织为区块，减少比较范围。</li></ol><h2 id="六、v-show和v-if有什么区别-使用场景分别是什么" tabindex="-1">六、v-show和v-if有什么区别？使用场景分别是什么？ <a class="header-anchor" href="#六、v-show和v-if有什么区别-使用场景分别是什么" aria-label="Permalink to &quot;六、v-show和v-if有什么区别？使用场景分别是什么？&quot;">​</a></h2><p><strong>相同点</strong>：控制元素在页面是否显示</p><p><strong>不同点</strong>：</p><ul><li>控制手段不同：<code>v-show</code> 控制的是 <code>css</code> 的 <code>display</code> 属性是否为 <code>none</code> 来控制元素的是否隐藏，而 <code>v-if</code> 是直接不渲染 DOM 元素或者直接删除 DOM 元素。</li><li>控制过程区别：<code>v-if</code> 切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件，如果控制的是组件，也会执行组件的生命周期钩子；而<code>v-show</code> 只是简单的基于css切换。</li><li>编译区别：<code>v-if</code> 在编译过程中会被转化成<strong>三元表达式</strong>,条件不满足时不渲染此节点。<code>v-show</code> 会被编译成指令，条件不满足时控制样式将对应节点隐藏 （内部其他指令依旧会继续执行）。</li><li>性能消耗：<code>v-if</code> 比 <code>v-show</code> 有更高的性能消耗。</li></ul><p><strong>使用场景</strong>：频繁切换 + 不需要销毁状态用 <code>v-show</code>，反之用 <code>v-if</code>。</p><p>v-if 源码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> genIfConditions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    conditions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ASTIfConditions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CodegenState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    altGen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    altEmpty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conditions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> altEmpty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;_e()&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> condition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conditions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition.exp) {   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果有表达式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`(\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">condition</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">})?\${</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将表达式作为条件拼接成元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        genTernaryExp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">condition</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">block</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        }:\${</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        genIfConditions</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conditions</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">altGen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">altEmpty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        }\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">genTernaryExp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">condition</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">block</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 没有表达式直接生成元素 像v-else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // v-if with v-once should generate code like (a)?_m(0):_m(1)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> genTernaryExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> altGen</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> altGen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el, state)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.once</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> genOnce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el, state)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> genElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el, state)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>v-show 源码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (el: any, { value }: VNodeDirective, vnode: VNodeWithData) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> originalDisplay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.__vOriginalDisplay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        el.style.display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;none&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.style.display </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取原始显示值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        el.style.display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalDisplay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;none&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 根据属性控制显示或者隐藏</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="七、vue中-computed-和-watch-的区别" tabindex="-1">七、Vue中 computed 和 watch 的区别 <a class="header-anchor" href="#七、vue中-computed-和-watch-的区别" aria-label="Permalink to &quot;七、Vue中 computed 和 watch 的区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>computed (计算属性)</th><th>watch (侦听器)</th></tr></thead><tbody><tr><td>设计目的</td><td>派生新数据</td><td>观察数据变化执行副作用</td></tr><tr><td>返回值</td><td>必须返回一个值</td><td>不需要返回值</td></tr><tr><td>缓存</td><td>有缓存，依赖不变时不重新计算</td><td>无缓存，每次变化都执行</td></tr><tr><td>异步操作</td><td>不能包含异步操作</td><td>可以执行异步操作</td></tr><tr><td>初始执行</td><td>立即执行</td><td>默认不立即执行(可配置 immediate: true)</td></tr><tr><td>使用场景</td><td>模板中使用的派生数据</td><td>数据变化时需要执行的操作(如API调用、复杂逻辑)</td></tr></tbody></table><h2 id="vue-set方法是如何实现的" tabindex="-1">Vue.set方法是如何实现的? <a class="header-anchor" href="#vue-set方法是如何实现的" aria-label="Permalink to &quot;Vue.set方法是如何实现的?&quot;">​</a></h2><p><strong>Vue2的实现</strong>：在 Vue 2 中，Vue.set 的实现主要位于 <code>src/core/observer/index.js</code> 中：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1.如果是数组 Vue.set(array,1,100); 调用我们重写的splice方法 (这样可以更新视图)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isValidArrayIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2.如果是对象本身的属性，则直接添加即可</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).__ob__</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3.如果是响应式的也不需要将其定义成响应式属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    if (!</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target[key] = val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        return val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 4.将属性定义成响应式的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    defineReactive(ob.value, key, val)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 5.通知视图更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ob.dep.notify()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Vue3 中 set 方法已经被移除，因为 proxy 天然弥补 vue2 响应式的缺陷。</p><h2 id="vue2-的生命周期方法有哪些-一般在哪一步发起请求及原因" tabindex="-1">Vue2 的生命周期方法有哪些？一般在哪一步发起请求及原因 <a class="header-anchor" href="#vue2-的生命周期方法有哪些-一般在哪一步发起请求及原因" aria-label="Permalink to &quot;Vue2 的生命周期方法有哪些？一般在哪一步发起请求及原因&quot;">​</a></h2><ul><li><strong>beforeCreate</strong>：在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</li><li><strong>created</strong>：实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。这里没有$el</li><li><strong>beforeMount</strong>：在挂载开始之前被调用：相关的 render 函数首次被调用。</li><li><strong>mounted</strong>：el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li><li><strong>beforeUpdate</strong>：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li><li><strong>updated</strong>：由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li><li><strong>beforeDestroy</strong>：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li><strong>destroyed</strong>：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li></ul><p><strong>钩子函数的作用</strong>：</p><ul><li><strong>created</strong>：实例已经创建完成，因为它是最早触发的原因可以进行一些数据，资源的请求。(服务端渲染支持created方法)</li><li><strong>mounted</strong>：实例已经挂载完成，可以进行一些DOM操作</li><li><strong>beforeUpdate</strong>：可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li><li><strong>updated</strong>：可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。 该钩子在服务器端渲染期间不被调用。</li><li><strong>destroyed</strong>：可以执行一些优化操作,清空定时器，解除绑定事件</li></ul><p>在哪发送请求都可以，主要看具体你要做什么事，一般会在 <code>created</code> 和 <code>mounted</code> 发起请求，但注意服务端渲染不执行 <code>mounted</code> 钩子。</p><h2 id="vue组件间传值的方式及之间的区别" tabindex="-1">Vue组件间传值的方式及之间的区别 <a class="header-anchor" href="#vue组件间传值的方式及之间的区别" aria-label="Permalink to &quot;Vue组件间传值的方式及之间的区别&quot;">​</a></h2><p><strong>vue2</strong>：</p><ul><li>一、父子通信 <ol><li><code>props</code></li><li><code>$emit</code></li><li><code>$attrs、$listeners</code></li><li><code>$parent、$children</code></li><li><code>$ref</code></li><li><code>作用域插槽</code></li><li><code>v-model</code></li></ol></li><li>二、兄弟组件通信 <ol><li><code>mitt</code></li><li><code>$parent</code></li><li><code>vuex/pinia</code></li><li><code>app.config.globalProperties</code></li></ol></li><li>三、跨层级通信 <ol><li><code>vuex</code></li><li><code>provide/inject</code></li><li><code>event bus</code></li></ol></li></ul><p><strong>vue3</strong>：</p><ul><li>一、父子通信 <ol><li><code>props</code></li><li><code>defineEmits</code></li><li><code>$attrs</code></li><li><code>$ref + defineExpose</code></li><li><code>$parent</code></li><li><code>作用域插槽</code></li><li><code>v-model</code></li></ol></li><li>二、兄弟组件通信 <ol><li><code>mitt</code></li><li><code>$parent</code></li><li><code>vuex/pinia</code></li><li><code>app.config.globalProperties</code></li></ol></li><li>三、跨层级通信 <ol><li><code>mitt</code></li><li><code>vuex/pinia</code></li><li><code>provide/inject</code></li></ol></li></ul><p><strong>其它通信方式</strong>：</p><ul><li>浏览器本地存储<code>storage</code></li><li>全局<code>window</code>对象</li><li>ES6模块化import/export</li></ul><h2 id="vue-mixin的使用场景和原理-vue2" tabindex="-1">Vue.mixin的使用场景和原理？（Vue2） <a class="header-anchor" href="#vue-mixin的使用场景和原理-vue2" aria-label="Permalink to &quot;Vue.mixin的使用场景和原理？（Vue2）&quot;">​</a></h2><p>Vue.mixin 的作用就是抽离公共的业务逻辑，原理类似“对象的继承”，当组件初始化时会调用 mergeOptions 方法进行合并，采用策略模式针对不同的属性进行合并。如果混入的数据和本身组件中的数据冲突，会采用“就近原则”以组件的数据为准。</p><p>mixin 中有很多缺陷 &quot;命名冲突问题&quot;、&quot;依赖问题&quot;、&quot;数据来源问题&quot;,注意 mixin 的数据是不会被共享的！</p><h2 id="vue的组件渲染流程" tabindex="-1">Vue的组件渲染流程? <a class="header-anchor" href="#vue的组件渲染流程" aria-label="Permalink to &quot;Vue的组件渲染流程?&quot;">​</a></h2><ol><li>在渲染父组件时会创建父组件的虚拟节点,其中可能包含子组件的标签</li><li>在创建虚拟节点时,获取组件的定义使用Vue.extend生成组件的构造函数。</li><li>将虚拟节点转化成真实节点时，会创建组件的实例并且调用组件的$mount方法。</li><li>所以组件的创建过程是先父后子。</li></ol><h2 id="vue中组件的data为什么是一个函数" tabindex="-1">Vue中组件的data为什么是一个函数? <a class="header-anchor" href="#vue中组件的data为什么是一个函数" aria-label="Permalink to &quot;Vue中组件的data为什么是一个函数?&quot;">​</a></h2><p>每次使用组件时都会对组件进行实例化操作，并且调用data函数返回一个对象作为组件的数据源。这样可以保证多个组件间数据互不影响。</p><h2 id="vue-use是干什么的-原理是什么" tabindex="-1">Vue.use是干什么的?原理是什么? <a class="header-anchor" href="#vue-use是干什么的-原理是什么" aria-label="Permalink to &quot;Vue.use是干什么的?原理是什么?&quot;">​</a></h2><p>Vue.use 是用来使用插件的，我们可以在插件中扩展全局组件、指令、原型方法等。</p><p>Vue.use 源码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 插件不能重复的加载</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> installedPlugins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._installedPlugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._installedPlugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (installedPlugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plugin) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // additional parameters</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unshift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// install方法的第一个参数是Vue的构造函数，其他参数是Vue.use中除了第一个参数的其他参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plugin.install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用插件的install方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        plugin.install.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plugin, args)  Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 插件本身是一个函数，直接让函数执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        plugin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    installedPlugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plugin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缓存插件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,73))])}const u=n(k,[["render",p]]);export{y as __pageData,u as default};

import{_ as e,c as o,o as p,ae as t}from"./chunks/framework.DaakH-K9.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"collect/engineer/turbo.md","filePath":"collect/engineer/turbo.md"}'),a={name:"collect/engineer/turbo.md"};function n(u,r,b,c,i,l){return p(),o("div",null,r[0]||(r[0]=[t('<h2 id="什么是turborepo" tabindex="-1">什么是Turborepo？ <a class="header-anchor" href="#什么是turborepo" aria-label="Permalink to &quot;什么是Turborepo？&quot;">​</a></h2><p>Turborepo 是一个高性能的 JavaScript 和 TypeScript 项目构建系统，采用Go语言实现，所以在语言层面上就具有一定的性能优势，可以大大提高monorepo项目的构建速度。</p><p>在开发层面， Turborepo抽象出所有繁琐的配置、脚本和工具，减少项目配置的复杂性，可以让我们专注于业务的开发，并且支持使用 Yarn、Npm、Pnpm</p><h2 id="turborepo的优势" tabindex="-1">TurboRepo的优势 <a class="header-anchor" href="#turborepo的优势" aria-label="Permalink to &quot;TurboRepo的优势&quot;">​</a></h2><p>1、多任务并行处理</p><p>Turbo支持多个任务的并行运行，我们在对多个子包，编译打包的过程中，turbo会同时进行多个任务的处理</p><p>对于项目中 A 依赖于 B，B 依赖于 C，构建串行顺序为 C、B、A。Turbo它能够有效地安排任务类似于瀑布可以同时异步执行多个任务，而 lerna 一次只能执行一项任务 所以Turbo的性能不言而喻。</p><p>2、更快的增量构建</p><p>如果我们的项目过大，构建多个子包会造成时间和性能的浪费，turborepo中的缓存机制 可以帮助我们记住构建内容 并且跳过已经计算过的内容，优化打包效率。</p><p>3、任务管道</p><p>用配置文件定义任务之间的关系，然后让Turborepo优化构建内容和时间。</p><p>4、远程云缓存</p><p>Turbo通过其远程缓存功能，团队成员、CI/CD 共享远程构建缓存，以实现更快的构建。</p>',13)]))}const T=e(a,[["render",n]]);export{_ as __pageData,T as default};

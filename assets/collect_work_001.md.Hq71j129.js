import{_ as a,c as i,o as e,ae as t}from"./chunks/framework.z0sZ1NT9.js";const _=JSON.parse('{"title":"001 如何封装组件","description":"","frontmatter":{"title":"001 如何封装组件","date":"2021-08-05T00:00:00.000Z","categories":["工作总结"],"tags":["工作总结"],"sidebar":"auto"},"headers":[],"relativePath":"collect/work/001.md","filePath":"collect/work/001.md"}'),o={name:"collect/work/001.md"};function r(n,l,s,h,c,d){return e(),i("div",null,l[0]||(l[0]=[t('<h2 id="前端组件化发展" tabindex="-1">前端组件化发展 <a class="header-anchor" href="#前端组件化发展" aria-label="Permalink to &quot;前端组件化发展&quot;">​</a></h2><ul><li>早期对公共的js、css文件的抽离封装</li><li>根据业务逻辑来进行抽离，比如公共的页面头部、尾部等</li><li>以JQUI、easyUI、mini_UI以及ExtJS为代表的DOM封装——表现炫酷，但维护性差</li><li>前端MVVM模式的兴起，Vue、React、Angular三大框架的组件化思想——一切皆组件</li></ul><h2 id="组件封装的好处" tabindex="-1">组件封装的好处 <a class="header-anchor" href="#组件封装的好处" aria-label="Permalink to &quot;组件封装的好处&quot;">​</a></h2><ol><li>复用，提高开发效率。</li><li>降低系统各个功能的耦合性，解耦(第三方库)，提高功能内部的聚合性</li><li>降低颗粒度，可维护性高</li><li>方便统一修改(UI 风格、交互方式等)</li></ol><h2 id="组件封装的难点" tabindex="-1">组件封装的难点 <a class="header-anchor" href="#组件封装的难点" aria-label="Permalink to &quot;组件封装的难点&quot;">​</a></h2><ol><li>同步性和个性化的处理</li><li>组件之间的数据共享</li><li>组件之间的时间传递</li><li>开发人员的抽象能力、编码能力，使用规范问题</li></ol><h2 id="组件抽象的基本原则" tabindex="-1">组件抽象的基本原则 <a class="header-anchor" href="#组件抽象的基本原则" aria-label="Permalink to &quot;组件抽象的基本原则&quot;">​</a></h2><ul><li><strong>单一性</strong></li></ul><p>单一性要求组件具备高内聚、低耦合的特性，只需做好一件事情，避免与其它组件产生依赖关系。</p><ul><li><strong>复用性/通用性/扩展性</strong></li></ul><p>设计组件时，要充分考虑复用性、通用性和扩展性，适用范围广，同时也可以预留出一些供扩展的接口，可以改变组件的内部逻辑，提供个性化扩展。</p><p>这里还有两种情况：</p><ol><li>可以在不同的项目之间使用的组件，称为基础组件/业务组件/公共组件.</li><li>在项目内部使用，仅在当前场景下作为一个独立的模块抽取出来的组件，可以称之为项目组件。</li></ol><p>公共组件和项目组件的侧重点不同，公共组件更看重其通用性，通过一个组件满足不同项目中相似的使用场景，而项目组件更多的是处理当前业务中的特殊场景，可能是页面拆解后的不同模块，也可能是不同操作的弹框，这种组件往往不适合直接嫁接到其它模块或项目中。所以对于一个组件来说，没不要为了追求通用性而使其很难维护。</p><h2 id="分离处理" tabindex="-1">分离处理 <a class="header-anchor" href="#分离处理" aria-label="Permalink to &quot;分离处理&quot;">​</a></h2><p>抽离组件时最好将业务层和视图层进行分离，视图层负责页面展示样式和交互，而业务层主要负责处理业务逻辑，比如接口调用，格式化数据等。其好处在于职责分离、提高组件性能。</p><h2 id="组件的封装思路" tabindex="-1">组件的封装思路 <a class="header-anchor" href="#组件的封装思路" aria-label="Permalink to &quot;组件的封装思路&quot;">​</a></h2><ol><li>看封装的是公共组件还是项目组件，配置抽离</li><li>该暴露哪些接口-可扩展性和灵活性</li><li>封装的组件内部颗粒度不宜过大，合理拆分</li></ol><h2 id="如何保证组件的可靠性和可用性" tabindex="-1">如何保证组件的可靠性和可用性 <a class="header-anchor" href="#如何保证组件的可靠性和可用性" aria-label="Permalink to &quot;如何保证组件的可靠性和可用性&quot;">​</a></h2><ol><li>功能测试和单元测试</li><li>编写详细易懂的 README 文档</li></ol>',20)]))}const p=a(o,[["render",r]]);export{_ as __pageData,p as default};

import{_ as a,c as e,o as i,ae as d}from"./chunks/framework.BKNbpbHR.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"collect/devOps/1.gitlab.md","filePath":"collect/devOps/1.gitlab.md"}'),r={name:"collect/devOps/1.gitlab.md"};function l(o,t,n,s,b,c){return i(),e("div",null,[...t[0]||(t[0]=[d('<h2 id="一、什么是gitlab" tabindex="-1">一、什么是GitLab？ <a class="header-anchor" href="#一、什么是gitlab" aria-label="Permalink to &quot;一、什么是GitLab？&quot;">​</a></h2><ol><li>GitLab是一个开源分布式版本控制系统</li><li>开发语言：Ruby</li><li>功能：管理项目源代码、版本控制、代码复用与查找</li></ol><h2 id="二、gitlab与github的不同" tabindex="-1">二、Gitlab与GitHub的不同 <a class="header-anchor" href="#二、gitlab与github的不同" aria-label="Permalink to &quot;二、Gitlab与GitHub的不同&quot;">​</a></h2><ul><li>Github：分布式在线代码托管仓库，个人版本可直接在线免费使用，企业版本收费且需要服务器安装</li><li>Gitlab：分布式在线代码仓库托管软件，分社区免费版本与企业收费版本，都需要服务器安装</li></ul><h2 id="三、gitlab的优势和应用场景" tabindex="-1">三、Gitlab的优势和应用场景 <a class="header-anchor" href="#三、gitlab的优势和应用场景" aria-label="Permalink to &quot;三、Gitlab的优势和应用场景&quot;">​</a></h2><ol><li>开源免费，适合中小型公司将代码放置在该系统中</li><li>差异化的版本管理，离线同步以及强大的分支管理功能</li><li>便捷的GUI操作界面以及强大的账户权限管理功能</li><li>集成度很高，能够集成绝对多数的开发工具</li><li>支持内置HA，保证在高并发下仍旧实现高可用性</li></ol><h2 id="四、gitlab主要服务构成" tabindex="-1">四、GitLab主要服务构成 <a class="header-anchor" href="#四、gitlab主要服务构成" aria-label="Permalink to &quot;四、GitLab主要服务构成&quot;">​</a></h2><ol><li>Nginx静态Web服务器</li><li>Gitlab-workhorse轻量级的反向代理服务器</li><li>Gitlab-shell用于处理Git命令和修改authorized keys列表</li><li>Logrotate日志文件管理工具</li><li>Postgresql数据库</li><li>Redis缓存服务器</li></ol><h2 id="五、gitlab的工作流程" tabindex="-1">五、GitLab的工作流程 <a class="header-anchor" href="#五、gitlab的工作流程" aria-label="Permalink to &quot;五、GitLab的工作流程&quot;">​</a></h2><ol><li>创建并克隆项目</li><li>创建项目某Feature分支</li><li>编写代码并提交至该分支</li><li>推送该项目分支至远程Gitlab服务器</li><li>进行代码检查并提交Master主分支合并申请</li><li>项目领导审查代码并确认合并申请</li></ol><h2 id="六、gitlab内置ci-cd" tabindex="-1">六、GitLab内置CI/CD <a class="header-anchor" href="#六、gitlab内置ci-cd" aria-label="Permalink to &quot;六、GitLab内置CI/CD&quot;">​</a></h2><h3 id="job" tabindex="-1">Job <a class="header-anchor" href="#job" aria-label="Permalink to &quot;Job&quot;">​</a></h3><p>在文件中可以定义一个或多个作业，每个作业具有唯一的名称，每个作业是独立执行的，<em>每个作业</em>_<strong>至少包含一个script</strong>___</p><h3 id="stages" tabindex="-1">stages： <a class="header-anchor" href="#stages" aria-label="Permalink to &quot;stages：&quot;">​</a></h3><p>用于定义作业可以使用的阶段，并且是全局定义，同一个阶段的作业并行运行，不同阶段按顺序运行</p><h3 id="only" tabindex="-1">only： <a class="header-anchor" href="#only" aria-label="Permalink to &quot;only：&quot;">​</a></h3><p>用分支策略来限制jobs构建</p><h3 id="script" tabindex="-1">script: <a class="header-anchor" href="#script" aria-label="Permalink to &quot;script:&quot;">​</a></h3><p>项目中package中的脚本</p><h3 id="environment" tabindex="-1">environment： <a class="header-anchor" href="#environment" aria-label="Permalink to &quot;environment：&quot;">​</a></h3><p>定义此作业完成部署的环境名称</p><p>下面是每个jobs的详细变量名：</p><table tabindex="0"><thead><tr><th>Keyword</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>script</td><td>yes</td><td>Runner执行的命令或脚本</td></tr><tr><td>image</td><td>no</td><td>所使用的docker镜像，查阅<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.gitlab.com%2Fce%2Fci%2Fdocker%2Fusing_docker_images.html%23define-image-and-services-from-gitlab-ciyml" target="_blank" rel="noreferrer">使用docker镜像</a></td></tr><tr><td>services</td><td>no</td><td>所使用的docker服务，查阅<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.gitlab.com%2Fce%2Fci%2Fdocker%2Fusing_docker_images.html%23define-image-and-services-from-gitlab-ciyml" target="_blank" rel="noreferrer">使用docker镜像</a></td></tr><tr><td>stage</td><td>no</td><td>定义job stage（默认：test）</td></tr><tr><td>type</td><td>no</td><td>stage的别名（已弃用）</td></tr><tr><td>variables</td><td>no</td><td>定义job级别的变量</td></tr><tr><td>only</td><td>no</td><td>定义一列git分支，并为其创建job</td></tr><tr><td>except</td><td>no</td><td>定义一列git分支，不创建job</td></tr><tr><td>tags</td><td>no</td><td>定义一列tags，用来指定选择哪个Runner（同时Runner也要设置tags）</td></tr><tr><td>allow_failure</td><td>no</td><td>允许job失败。失败的job不影响commit状态</td></tr><tr><td>when</td><td>no</td><td>定义何时开始job。可以是on_success，on_failure，always或者manual</td></tr><tr><td>dependencies</td><td>no</td><td>定义job依赖关系，这样他们就可以互相传递artifacts</td></tr><tr><td>cache</td><td>no</td><td>定义应在后续运行之间缓存的文件列表</td></tr><tr><td>before_script</td><td>no</td><td>重写一组在作业前执行的命令</td></tr><tr><td>after_script</td><td>no</td><td>重写一组在作业后执行的命令</td></tr><tr><td>environment</td><td>no</td><td>定义此作业完成部署的环境名称</td></tr><tr><td>coverage</td><td>no</td><td>定义给定作业的代码覆盖率设置</td></tr></tbody></table>',23)])])}const u=a(r,[["render",l]]);export{g as __pageData,u as default};

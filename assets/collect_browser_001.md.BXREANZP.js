import{_ as s,c as a,o as t,ae as l}from"./chunks/framework.Bglz0IlG.js";const c=JSON.parse('{"title":"001 浏览器的多进程架构","description":"","frontmatter":{"title":"001 浏览器的多进程架构","date":"2021-04-19T00:00:00.000Z","categories":["浏览器工作原理"],"tags":["浏览器架构"],"sidebar":"auto"},"headers":[],"relativePath":"collect/browser/001.md","filePath":"collect/browser/001.md"}'),r={name:"collect/browser/001.md"};function e(n,i,o,h,p,g){return t(),a("div",null,[...i[0]||(i[0]=[l(`<h2 id="进程和线程" tabindex="-1">进程和线程 <a class="header-anchor" href="#进程和线程" aria-label="Permalink to &quot;进程和线程&quot;">​</a></h2><p>并行处理：指同一时刻处理多个任务。比如要计算下面三个表达式的值，并显示结果。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><p>在编写代码时，我们需要把这个过程依次拆为四个任务：</p><ul><li>任务1：计算a = 1 + 2</li><li>任务2：计算b = 3 * 4</li><li>任务3：计算c = 5 / 2</li><li>任务4：显示最后的结果。 如果用<strong>单线程</strong>的话需要按四步走依次处理，而如果用<strong>多线程</strong>在处理的话，只需要按“两步走”：第一步是采用三个线程同时执行前三个任务，第二步，再执行第四个任务。很明显，并行处理能大大提升性能。</li></ul><p>进程：<strong>一个进程就是第一个程序的运行实例。<strong>当启动一个程序的时候，操作系统会为改程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫</strong>进程</strong>。</p><p>线程：<strong>线程是不能单独存在的，它是由进程来启动和管理的</strong>。线程是依附于进程的，而进程中使用多线程并行处理能提升运算效率。</p><p>进程和线程之间的关系有以下4个特点：</p><ol><li>进程中任意一线程执行出错，都会导致整个进程的崩溃（已经计算出的结果会丢失）。</li><li>线程之间共享进程中的数据。</li><li>当一个进程关闭之后，操作系统会回收进程所占用的内存。</li><li>进程之间的内容相互隔离。</li></ol><h2 id="单进程浏览器时代" tabindex="-1">单进程浏览器时代 <a class="header-anchor" href="#单进程浏览器时代" aria-label="Permalink to &quot;单进程浏览器时代&quot;">​</a></h2><p>单进程浏览器是指浏览器的所有功能模块都是运行在同一个进程里，这些模块包含了网络、插件、渲染引擎、页面、JavaScript运行环境等，早在2007年之前，市面上的浏览器都是单进程的。</p><p>单进程浏览器的缺陷：</p><ol><li>不稳定</li></ol><ul><li>早期通过插件来实现Web视频、Web游戏等各种强大的功能，而插件是容易出问题的模块，一旦意外崩溃就会引起整个浏览器的崩溃。</li><li>渲染引擎模块也是不稳定的，写复杂的JavaScript代码就有可能引起渲染引擎的崩溃，同时引起整个浏览器的崩溃。</li></ul><ol start="2"><li>不流畅 同一时刻就有一个模块可以运行。</li><li>不安全</li></ol><ul><li>插件可以使用C/C++等代码编写，通过插件可以获取到操作系统的任意资源，当你在页面运行一个插件时也就意味着这个插件能完全操作你的电脑，如果是个恶意插件，那么它就可以释放病毒，窃取你的账号密码，引发安全性问题。</li><li>页面脚本可以通过浏览器的漏洞来获取系统权限，然后对你的电脑做一些恶意的事情。</li></ul><h2 id="多进程浏览器时代" tabindex="-1">多进程浏览器时代 <a class="header-anchor" href="#多进程浏览器时代" aria-label="Permalink to &quot;多进程浏览器时代&quot;">​</a></h2><p>让页面运行在单独的渲染进程中，同时页面里的插件也运行在单独的插件进程之中，而进程之间是通过IPC机制进行通信。</p><p><strong>如何解决不稳定的问题</strong>？ 由于进程是相互隔离的，页面或者插件崩溃不会影响到其它页面。 <strong>如何解决不流畅的问题</strong>？ JavaScript是运行在渲染中的，即使在js中写了死循环阻塞了渲染进程，造成的影响也只是当前渲染的页面会没有响应。 <strong>如何解决不安全的问题</strong>？ 采用多进程架构的好处是可以使用<strong>安全沙箱</strong>，可以理解为给进程上了一把锁，让其无法向硬盘上写入数据，不能在敏感位置读取任何数据，也不能获取系统权限。</p><h2 id="目前的多进程架构" tabindex="-1">目前的多进程架构 <a class="header-anchor" href="#目前的多进程架构" aria-label="Permalink to &quot;目前的多进程架构&quot;">​</a></h2><p>最新的Chrome浏览器包括：1个浏览器（Browser）主进程、1个GPU进程、1个网络（NetWork）进程、多个渲染进程和多个插件进程。</p><ul><li><strong>浏览器进程</strong>：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</li><li><strong>渲染进程</strong>：核心任务是将HTML、CSS和JavaScript转换为用户可以与之交互的网页，排版引擎Blink和JavaScript引擎V8都是运行在该进程中，默认情况下，Chrome会为每个Tab标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li><strong>GPU进程</strong>: Chrome刚开始发布的时候是没有GPU进程的。而GPU的使用初衷是为了实现3D CSS的效果，只是随后网页、Chrome的UI界面都选择采用GPU绘制，这使得GPU成为浏览器普遍的需求。最后，Chrome在其多进程架构上也引入了GPU进程。</li><li><strong>网络进程</strong>：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直到最近才独立出来，成为一个单独的进程。</li><li><strong>插件进程</strong>：主要是负责插件的执行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</li></ul><p>所以，打开1个页面至少需要1个网络进程、1个浏览器进程、1个GPU进程以及一个渲染进程，共4个。</p><p>多进程模型的缺陷：</p><ul><li><strong>更高的资源占用</strong>。因为每个进程都会包括公共基础结构的副本（如JavaScript运行环境），这就意味着浏览器会消耗更多的内存资源。</li><li><strong>更复杂的体系结构</strong>。浏览器各模块之前耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。</li></ul><p>对于上面这两个问题，Chrome团队一直在寻求一种弹性方案，既可以解决资源占用高的问题，也可以解决复杂的体系结构的问题。</p><h2 id="未来面向服务的架构" tabindex="-1">未来面向服务的架构 <a class="header-anchor" href="#未来面向服务的架构" aria-label="Permalink to &quot;未来面向服务的架构&quot;">​</a></h2><p>为了解决这些问题，在 2016 年，Chrome 官方团队使用“<strong>面向服务的架构</strong>”（Services Oriented Architecture，简称 <strong>SOA</strong>）的思想设计了新的 Chrome 架构。也就是说 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过 IPC 来通信，从而<strong>构建一个更内聚、松耦合、易于维护和扩展的系统</strong>，更好实现 Chrome 简单、稳定、高速、安全的目标。</p>`,28)])])}const d=s(r,[["render",e]]);export{c as __pageData,d as default};

import{_ as l,c as e,o as a,ae as n}from"./chunks/framework.BezmCoJM.js";const g=JSON.parse('{"title":"脚手架han-cli","description":"","frontmatter":{},"headers":[],"relativePath":"collect/engineer/1.cli.md","filePath":"collect/engineer/1.cli.md"}'),t={name:"collect/engineer/1.cli.md"};function o(c,i,r,h,p,s){return a(),e("div",null,[...i[0]||(i[0]=[n('<h1 id="脚手架han-cli" tabindex="-1">脚手架han-cli <a class="header-anchor" href="#脚手架han-cli" aria-label="Permalink to &quot;脚手架han-cli&quot;">​</a></h1><p>脚手架：一个在操作系统上的客户端</p><h2 id="开发背景" tabindex="-1">开发背景 <a class="header-anchor" href="#开发背景" aria-label="Permalink to &quot;开发背景&quot;">​</a></h2><ol><li>创建项目有需要大量拷贝文件（项目配置、组件库、公共方法、请求封装、组件库等等），效率低而且同步比较麻烦</li><li>协同操作，git操作不规范，分支混乱，操作耗时</li></ol><h2 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h2><ol><li>分包</li></ol><ul><li>@han-cli/core 脚手架启动，命令注册</li><li>@han-cli/exec 动态下载/更新package，并使用子进程执行package</li><li>@han-cli/package npm包管理，提供下载/更新package功能</li><li>@han-cli/init init命令逻辑，创建项目</li><li>@han-cli/publish 发布项目 git自动化流程 + 云构建和云发布</li><li>@han-cli/git 封装git自动化操作</li><li>@han-cli/command 封装command执行流程 提供init exec两个方法让子类实现</li><li>@han-cli/utils 工具方法</li><li>@han-cli/log 封装日志打印功能</li><li>@han-cli/npm-info 封装npm操作</li></ul><p>@han-cli/core：</p><ol><li><p>prepare</p><ul><li>检查版本号</li><li>权限检查root启动 root-check 权限降级</li><li>用户主目录检查</li><li>检查环境变量</li><li>node版本检查</li><li>检查cli版本号</li></ul></li><li><p>registerCommand</p><ul><li>init</li><li>publish</li><li>deploy</li></ul></li></ol><p>整体流程：@han-cli/core -&gt; @han-cli/exec -&gt; han-cli/package -&gt; @han-cli/init @han-cli/publish @han-cli/deploy</p><p>git自动化流程：</p><ol><li>prepare（自动化提交准备和仓库初始化） <ul><li>检查缓存主目录，.han-cli <ul><li>在主目录下新建.git文件 <ul><li>.git_token 缓存token信息</li><li>.git_own 缓存远程仓库类型：个人/组织</li><li>.git_login 缓存登录信息：个人/某个组织</li></ul></li></ul></li><li>检查用户远程仓库类型</li><li>获取远程仓库Token</li><li>获取远程用户和组织信息</li><li>检查并创建远程仓库</li><li>检查并创建.gitignore文件</li><li>完成本地仓库初始化（检查源码根目录是否存在.git文件，GIT_ROOT_DIR = .git 如果存在则证明git已经完成初始化，跳过添加远程仓库和initCommit阶段）</li><li>git初始化并添加远程remote</li><li>initCommit，包括检查冲突，检查not-committed，合并远程online</li></ul></li><li>commit（代码自动化提交） <ul><li>生成开发分支 <ul><li>获取远程开发分支</li><li>生成本地开发分支 <ul><li>当前版本要大于线上最新版本，也就是devVersion &gt;= releaseVersion，如果不大于，需要进行版本升级（大版本major，中版本minor，小版本patch）</li></ul></li><li>将version同步到package.json</li></ul></li><li>检查stash区</li><li>检查代码冲突</li><li>切换开发分支</li><li>合并远程online分支代码和开发分支代码</li><li>将开发分支代码推送到远程仓库</li></ul></li></ol>',12)])])}const m=l(t,[["render",o]]);export{g as __pageData,m as default};

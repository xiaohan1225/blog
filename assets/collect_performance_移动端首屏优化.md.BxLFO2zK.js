import{_ as s,c as a,o as l,ae as e}from"./chunks/framework.BAYqcHKv.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"collect/performance/移动端首屏优化.md","filePath":"collect/performance/移动端首屏优化.md"}'),n={name:"collect/performance/移动端首屏优化.md"};function t(h,i,p,k,r,d){return l(),a("div",null,i[0]||(i[0]=[e(`<p>我们可以先用 <code>performance 相关API</code> 来统计下页面的 <code>DOM 加载时间</code>。</p><p>旧版统计方法，使用 <code>performance</code> (已废弃):</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(performance.timing.domComplete </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.navigationStart);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>新版统计方法，使用 <code>PerformanceObserver</code> (推荐使用):</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 统计性能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry.domComplete);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ entryTypes: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;navigation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果 <code>DOM加载时间</code> 过长，比如超过 1s，就需要考虑进行优化了，优化的话主要从以下几个方向进行：</p><ul><li>网络资源请求</li><li>构建工具</li><li>缓存</li><li>渲染</li><li></li></ul><h2 id="一、网络资源请求" tabindex="-1">一、网络资源请求 <a class="header-anchor" href="#一、网络资源请求" aria-label="Permalink to &quot;一、网络资源请求&quot;">​</a></h2><h3 id="_1-1-减少请求个数" tabindex="-1">1.1 减少请求个数 <a class="header-anchor" href="#_1-1-减少请求个数" aria-label="Permalink to &quot;1.1 减少请求个数&quot;">​</a></h3><p>图片采用 <code>雪碧图(CSS Sprites)</code>，<code>base64</code>。</p><h3 id="_1-2-加快请求速度" tabindex="-1">1.2 加快请求速度 <a class="header-anchor" href="#_1-2-加快请求速度" aria-label="Permalink to &quot;1.2 加快请求速度&quot;">​</a></h3><p>将图片上传到 <code>cdn</code>。</p><h2 id="二、构建工具" tabindex="-1">二、构建工具 <a class="header-anchor" href="#二、构建工具" aria-label="Permalink to &quot;二、构建工具&quot;">​</a></h2><p>这里以 <code>webpack</code> 为例。</p><h3 id="_2-1" tabindex="-1">2.1 <a class="header-anchor" href="#_2-1" aria-label="Permalink to &quot;2.1&quot;">​</a></h3><h2 id="异步组件" tabindex="-1">异步组件 <a class="header-anchor" href="#异步组件" aria-label="Permalink to &quot;异步组件&quot;">​</a></h2><h2 id="静态资源cdn" tabindex="-1">静态资源cdn <a class="header-anchor" href="#静态资源cdn" aria-label="Permalink to &quot;静态资源cdn&quot;">​</a></h2><h2 id="首屏优化" tabindex="-1">首屏优化 <a class="header-anchor" href="#首屏优化" aria-label="Permalink to &quot;首屏优化&quot;">​</a></h2><p>构建工具：</p><ol><li>按需打包 组件库 lodash工具库 IgnorePlugin moment</li><li>sourcemap 生产none</li><li>babel-loader开启缓存</li><li>noParse</li><li>bundle hash</li><li>splitChunks</li><li>tree-shaking</li><li>external 配置vue.config.js 在html模板中加入定义好的cdn变量使用的代码</li></ol><p>网络请求：</p><ul><li>减少请求个数：base64 缓存</li><li>请求过程优化：gzip CDN</li></ul><p>静态资源：</p><ol><li>图片</li></ol><ul><li>base64</li><li>雪碧图（CSS Sprites）</li><li>WebP <ul><li>特点：色彩丰富，支持有损压缩和无损压缩， PNG 一样支持透明，像 GIF 一样可以显示动态图片，集多种图片文件格式的优点于一身</li><li>缺点：1. 兼容性 2.WebP 还会增加服务器的负担——和编码 JPG 文件相比，编码同样质量的 WebP 文件会占用更多的计算资源。</li><li>应用场景：优雅降级处理，由服务器根据 HTTP 请求头部的 Accept 字段来决定返回什么格式的图片 渲染：</li></ul></li><li>预渲染</li><li>ssr 用户体验：</li><li>骨架屏</li><li>懒加载</li></ul><h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h2>`,26)]))}const E=s(n,[["render",t]]);export{c as __pageData,E as default};

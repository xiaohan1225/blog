import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.BHrE6nLq.js";const p="/assets/v8%E5%86%85%E9%83%A8%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0.C9kFsh_0.svg",o=JSON.parse('{"title":"003 V8的快属性和慢属性","description":"","frontmatter":{"title":"003 V8的快属性和慢属性","date":"2021-05-03T00:00:00.000Z","categories":["JavaScript"],"tags":["JS引擎V8"],"sidebar":"auto"},"headers":[],"relativePath":"collect/v8/003.md","filePath":"collect/v8/003.md"}'),h={name:"collect/v8/003.md"};function l(k,s,e,r,g,E){return n(),a("div",null,s[0]||(s[0]=[t(`<p>javascript中的对象是一组组属性和值的集合，类似于数据结构中的<strong>字典</strong>，字符串作为键名，任意对象可作为键值，通过键名可以读取键值。</p><p>不过V8在实现对象存储的时候。并没有采取字典这种存储结构，因为字典是<strong>非线性</strong>的存储结构，查询效率较低。</p><p>这里提到了两个概念：</p><ol><li>字典</li></ol><p>字典（dictionary）是一些元素的集合。每个元素有一个称作key的域，不同元素的key各不相同，其操作有查询、插入和删除。</p><ol start="2"><li>非线性结构</li></ol><p>线性结构的特点是<strong>存储连续</strong>，每个位置之间的偏移量固定，通过线性结构的首位和对应位置的下标就可以算出数据存储的位置，假设首位的位置为s，每个位置的偏移量为8，索引为i，那么这个线性结构任意位置的的计算公式为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span></code></pre></div><p>这也是索引值从0开始的原因之一，因为如果从1开始的话公式就变为p = s + (i - 1)* 8，多了一次减运算。线性结构的代表为数组、队列、栈等。</p><p>非线性结构的特点是<strong>零散分布</strong>，比如堆、链表、字典等。</p><p>线性结构由于存储连续，虽然查询快，但是能存储的容量有限，因为在内存中很难找到一块很大的连续空间。非线性结构虽然查询慢，但能存储的数据量大。</p><p>为了提高效率，v8采用了一套复杂的存储策略。我们来看看v8到底是如何访问对象中的属性的？</p><p>首先，要对属性进行分类。</p><ol><li>根据属性类型的不同，可分为<strong>排序属性</strong>和<strong>常规属性</strong>。</li></ol><h2 id="排序属性-elements-和常规属性-properties" tabindex="-1">排序属性（elements）和常规属性（properties） <a class="header-anchor" href="#排序属性-elements-和常规属性-properties" aria-label="Permalink to &quot;排序属性（elements）和常规属性（properties）&quot;">​</a></h2><p>我们把对象中的数组属性称为<strong>排序属性</strong>，字符串属性称为<strong>常规属性</strong>。根据ECMAScript规范，<strong>数字属性应该按照索引值大小升序排列，字符串属性应根据创建时间升序排列。</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-c&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-a&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-h&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-b&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">c</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">a</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">h</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">b</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre></div><p>为了提高存储和访问性能，v8采用了两个<strong>线性结构</strong>来分别保存排序属性和常规属性，具体结构如下图所示： <img src="`+p+'" alt="图片加载失败"></p><p>如果执行遍历操作，v8会先从elements属性中按照顺序读取所有的元素，然后再在properties属性中读取所有的元素。</p><p>增加了elements属性和properties属性后，无疑是简化了程序的复杂度，但却增加了一层属性读取，反而降低了访问速度，于是v8推出了块、慢属性和对象内属性。</p><ol start="2"><li>根据属性访问速度的不同，可将属性分为<strong>快属性</strong>和<strong>慢属性</strong>。</li></ol><h2 id="快属性和慢属性" tabindex="-1">快属性和慢属性 <a class="header-anchor" href="#快属性和慢属性" aria-label="Permalink to &quot;快属性和慢属性&quot;">​</a></h2><p>在对象的常规属性很少的时候，v8会把部分常规属性直接存储到对象本身，提高查询效率，我们把这些属性称为<strong>对象内属性（in object properties）</strong>。如下图所示：</p><div class="img-box"> ![图片加载失败](../../assets/images/js/v8/对象内属性.svg) </div><p>对象内属性的数量是固定的，最多10个，如果添加的属性超过了对象分配的空间，则会将它们保存在常规属性中。常规属性虽然多了一层中间层，但扩容比较方便。</p><p>快属性：保存在线性数据结构中的属性。其查询速度块，但添加或删除大量属性时较慢。 慢属性：保存在非线性数据结构中的属性。v8的对象的属性一旦过多，就会采用非线性结构词典进行存储。</p>',26)]))}const y=i(h,[["render",l]]);export{o as __pageData,y as default};

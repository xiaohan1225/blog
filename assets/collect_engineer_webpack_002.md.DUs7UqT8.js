import{_ as i,c as a,o as l,ae as n}from"./chunks/framework.BAYqcHKv.js";const o=JSON.parse('{"title":"002 CommonJS和ES Module的区别","description":"","frontmatter":{"title":"002 CommonJS和ES Module的区别","date":"2021-07-13T00:00:00.000Z","categories":["Webpack"],"tags":["Webpack"],"sidebar":"auto"},"headers":[],"relativePath":"collect/engineer/webpack/002.md","filePath":"collect/engineer/webpack/002.md"}'),h={name:"collect/engineer/webpack/002.md"};function t(e,s,k,p,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="为什么使用模块化" tabindex="-1">为什么使用模块化？ <a class="header-anchor" href="#为什么使用模块化" aria-label="Permalink to &quot;为什么使用模块化？&quot;">​</a></h2><p>模块化是指将一个复杂的系统分解为多个模块以方便编码。</p><p>在之前的开发模块中，开发网页要通过<strong>命令空间</strong>的方式来组织代码，比如著名的jQuery库将它所有的API都挂到了window.$下，这样会存在一些问题：</p><ul><li>命令空间冲突，两个库可能会使用同一个名称，例如Zepto</li><li>无法合理地管理项目的依赖和版本</li><li>无法方便地控制依赖的加载顺序</li></ul><p>一旦项目过大，这种方式会变得难以维护，所以后面模块化的思想就诞生了。</p><h2 id="_1-commonjs" tabindex="-1">1. commonjs <a class="header-anchor" href="#_1-commonjs" aria-label="Permalink to &quot;1. commonjs&quot;">​</a></h2><ul><li>动态引入，执行时引入</li><li>在运行后才可以得知模块导出内容，编译阶段无法做静态分析</li><li>输出的是值的拷贝</li></ul><h3 id="commonjs原理" tabindex="-1">commonjs原理 <a class="header-anchor" href="#commonjs原理" aria-label="Permalink to &quot;commonjs原理&quot;">​</a></h3><p>a.js：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span></span></code></pre></div><p>b.js：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">targetPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> absPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, targetPath)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(absPath, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    exports: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exports&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;require&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;__dirname&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;__filename&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> return module.exports;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, req, __dirname, __filename)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印a</span></span></code></pre></div><h2 id="_2-es-module" tabindex="-1">2. es module <a class="header-anchor" href="#_2-es-module" aria-label="Permalink to &quot;2. es module&quot;">​</a></h2><ul><li>静态引入，编译时引入，</li><li>只能作为模块顶层的语句出现，不能出现在function里面或者是if里面</li><li>import的模块名只能是字符串常量</li><li>不管import的语句出现的位置在哪里，在模块初始化的时候所有的import都必须已经导入完成</li><li>输出的是值的引用</li></ul><h2 id="commonjs和es-module使用场景" tabindex="-1">commonjs和es module使用场景 <a class="header-anchor" href="#commonjs和es-module使用场景" aria-label="Permalink to &quot;commonjs和es module使用场景&quot;">​</a></h2><ul><li>浏览器端代码使用es2015 module，模块化使用灵活，且可充分利用tree shaking减少代码体积</li><li>服务端node适合动态引入，一般不支持tree-shaking和es module,同时也并不需要考虑代码体积，所以使用commonjs模块规范，同时也可以拥有更好的debug支持，提高开发效率。</li></ul><blockquote><p>tree-shaking：</p><ul><li>tree-shaking可以利用ES2015(es6)模块语法静态分析的特性，删除没有使用的代码，对代码体积进行优化</li><li>webpack tree-shaking开启条件：</li><li>使用es2015模块语法(import和export), require不行</li><li>配合JS代码压缩插件插件，如UglifyJSPlugin,TerserPlugin</li><li>去除babel-loader模块转换插件，不让babel-loader进行模块转换，以保留export和import关键字，然后让webpack来转换</li></ul></blockquote>`,17)]))}const g=i(h,[["render",t]]);export{o as __pageData,g as default};

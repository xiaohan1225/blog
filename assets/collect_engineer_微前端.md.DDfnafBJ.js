import{_ as i,c as a,o as e,ae as o}from"./chunks/framework.Bglz0IlG.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"collect/engineer/微前端.md","filePath":"collect/engineer/微前端.md"}'),r={name:"collect/engineer/微前端.md"};function t(n,l,s,u,d,c){return e(),a("div",null,[...l[0]||(l[0]=[o('<h2 id="说说微前端架构整体演进过程和架构" tabindex="-1">说说微前端架构整体演进过程和架构 <a class="header-anchor" href="#说说微前端架构整体演进过程和架构" aria-label="Permalink to &quot;说说微前端架构整体演进过程和架构&quot;">​</a></h2><p>项目痛点：</p><ol><li>项目代码量非常大，巨石项目</li><li>不同技术栈维护成本高</li><li>复用层</li></ol><p>解决方案：</p><ol><li>iframe</li><li>single-spa、qiankun，不同子项目子应用接入到统一平台</li><li>微前端体系设计</li></ol><h2 id="iframe-传统嵌入式方式" tabindex="-1">iframe 传统嵌入式方式 <a class="header-anchor" href="#iframe-传统嵌入式方式" aria-label="Permalink to &quot;iframe 传统嵌入式方式&quot;">​</a></h2><h3 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p>早期的微前端架构是通过 <code>iframe</code> 来实现的，其本质上就是在一个页面内嵌入另一个网页，从而实现多个应用在同一个网页展示的效果。</p><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><p>需要将外部应用嵌入到当前页面，比如在企业级系统中，可能需要将不同业务模块嵌入到同一个页面内，实现功能的“整合”。</p><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><ol><li><strong>独立性</strong>：每个 <code>iframe</code> 都是一个独立的页面，有自己生命周期和上下文，可以独立运行，独立开发，独立部署，互不干扰。</li><li><strong>实现简单</strong>：只需要通过 <code>iframe</code> 标签即可实现，无需复杂的配置和代码。</li></ol><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><ol><li><strong>性能问题</strong>：<code>iframe</code> 性能开销大，多个页面嵌套时，加载很慢。</li><li><strong>难以通信和状态共享</strong>：<code>iframe</code> 是独立的页面，互相隔离，导致应用间的通信和状态共享变得困难。</li><li><strong>跨域问题</strong>：<code>iframe</code> 和父页面之间可能存在跨域问题，需要额外处理。</li></ol><h2 id="single-spa" tabindex="-1">single-spa <a class="header-anchor" href="#single-spa" aria-label="Permalink to &quot;single-spa&quot;">​</a></h2><h3 id="背景-1" tabindex="-1">背景 <a class="header-anchor" href="#背景-1" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p>随着单页面应用（SPA）的发展流行，微前端(<code>micro frontends</code>)的概念逐渐被提出，<code>single-spa</code> 是一个用于微前端架构的 JavaScript 库，它提供了一种统一的方式来管理和协调多个独立应用。</p><h3 id="使用场景-1" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景-1" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p><code>single-spa</code> 提供了一个加载和管理多个子应用的机制，这些子应用可以是不同的框架和库，比如 React、Vue、Angular 等。每个应用都可以独立开发、部署和更新，而不会影响到其他应用。</p><h3 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li><strong>框架无关性</strong>：支持多种前端框架，包括 React、Vue、Angular 等。</li><li><strong>高效加载</strong>：通过路由和生命周期管理，在合适的时机加载和卸载子应用，提高性能。</li><li><strong>应用间隔离</strong>: 子应用之间相互隔离，互不干扰。</li></ol><h3 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ol><li><strong>配置复杂</strong>：需要配置路由和生命周期管理，对于新手来说可能比较复杂。</li><li><strong>性能问题</strong>：由于各个应用是独立的，应用间的资源可能会重复加载，无法服用，增加内存和网络请求开销。</li></ol><h2 id="qiankun" tabindex="-1">qiankun <a class="header-anchor" href="#qiankun" aria-label="Permalink to &quot;qiankun&quot;">​</a></h2><h3 id="背景-2" tabindex="-1">背景 <a class="header-anchor" href="#背景-2" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p><code>qiankun</code> 是一个基于 <code>single-spa</code> 的微前端框架，它提供了一种简单易用的方式来管理和协调多个子应用。<code>qiankun</code> 的目标是让开发者能够轻松地构建一个由多个独立应用组成的大型应用。</p><h3 id="使用场景-2" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景-2" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p><code>qiankun</code> 是一个很强大的微前端框架，能够轻松实现子应用的注册、加载、卸载等操作，以及应用间的通信和状态共享。</p><h3 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li><strong>强大的生命周期管理</strong>：在应用的注册、加载、卸载等过程中可以通过生命周期定义逻辑。</li><li><strong>动态加载子应用</strong>：支持子应用的动态加载和按需加载，提高了性能。</li><li><strong>内置的跨框架支持</strong>：支持 React、Vue、Angular 等各种框架。</li></ul><h3 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li><strong>学习曲线</strong>： 虽然它封装了很多便捷功能，但配置和使用仍然需要一定的学习成本。</li><li><strong>应用间隔离问题</strong>：子应用的隔离仍然需要一定的技术支持，比如避免 CSS 和 JavaScript 的冲突。</li></ul><h2 id="微前端方案设计" tabindex="-1">微前端方案设计 <a class="header-anchor" href="#微前端方案设计" aria-label="Permalink to &quot;微前端方案设计&quot;">​</a></h2><ol><li>微前端架构概述</li></ol><ul><li>微前端的定义与优势</li><li>微前端的技术栈与常见框架</li><li>微前端架构中的挑战</li></ul><ol start="2"><li>项目背景与需求</li></ol><ul><li>业务系统概览：用户中心、营销中心、数据分析、订单管理、内容管理等。</li><li>项目需求分析：如何整合20多个独立的业务子应用</li><li>可扩展性、维护性与高效性需求</li></ul><ol start="3"><li>选型：为什么选择 QianKun</li></ol><ul><li>QianKun 概述</li><li>QianKun 的优势：支持多种框架 （Vue、React、Angular等）、生命周期管理、跨应用通信等。</li></ul><ol start="4"><li>微前端基座设计与架构</li></ol><ul><li>基座应用（Shell Application）设计与实现</li><li>子应用注册与加载</li><li>子应用隔离与沙箱机制</li></ul><ol start="5"><li>业务系统拆分与子应用设计</li></ol><ul><li>如何将20多个业务系统拆分为独立的子应用</li><li>每个子应用的职责划分与独立性要求</li><li>子应用框架的选型与设计（Vue、React、Angular等）</li></ul><ol start="6"><li>路由管理与跳转设计</li></ol><ul><li>主应用与子应用的路由管理策略</li><li>子应用路由与主路由的协同工作</li><li>使用 QianKun 的路由切换机制</li></ul><ol start="7"><li>跨应用通信设计</li></ol><ul><li>QianKun 的通信机制：共享状态与事件总线</li><li>应用间通信的策略：发布/订阅模式、全局状态管理</li><li>例子：如何在用户中心子应用与营销平台子应用之间共享数据</li></ul><ol start="8"><li>性能优化与安全性考虑</li></ol><ul><li>如何确保子应用加载性能优化：懒加载、按需加载</li><li>性能瓶颈分析：如何处理多子应用并发加载、代码分割等</li><li>安全性：跨域安全、沙箱机制、子应用的隔离设计</li></ul><ol start="9"><li>容器与子应用的部署策略</li></ol><ul><li>部署架构：基座应用与子应用的部署</li><li>子应用版本管理与升级机制</li><li>如何实现平滑过渡与无缝升级</li></ul><ol start="10"><li>开发流程与工具链建设</li></ol><ul><li>CI/CD 流程的设计：如何确保微前端架构下的自动化测试与构建</li><li>子应用独立开发与集成</li><li>自动化测试框架：如何编写跨子应用的测试用例</li></ul><ol start="11"><li>监控与日志管理</li></ol><ul><li>微前端架构下的监控策略：如何监听所有子应用的健康状态</li><li>集中化日志系统与异常捕获</li><li>性能监控与分析工具的使用</li></ul><ol start="12"><li>总结与展望</li></ol><ul><li>项目实施的关键点与挑战</li><li>微前端架构的长期维护与扩展</li><li>下一步的技术演化与优化方向</li></ul>',57)])])}const q=i(r,[["render",t]]);export{g as __pageData,q as default};

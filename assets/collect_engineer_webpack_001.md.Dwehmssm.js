import{_ as i,c as a,o as l,ae as n}from"./chunks/framework.CDwmhxVj.js";const c=JSON.parse('{"title":"001 常见的构建工具有哪些？为什么选择了Webpack?","description":"","frontmatter":{"title":"001 常见的构建工具有哪些？为什么选择了Webpack?","date":"2021-05-16T00:00:00.000Z","categories":["Webpack"],"tags":["Webpack"],"sidebar":"auto"},"headers":[],"relativePath":"collect/engineer/webpack/001.md","filePath":"collect/engineer/webpack/001.md"}'),p={name:"collect/engineer/webpack/001.md"};function e(t,s,h,k,r,E){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="构建工具的作用" tabindex="-1">构建工具的作用 <a class="header-anchor" href="#构建工具的作用" aria-label="Permalink to &quot;构建工具的作用&quot;">​</a></h2><ol><li>代码转换：将TypeScript编译成JavaScript，将SCSS编译成CSS，将ES6转化为ES5等。</li><li>文件优化：压缩JavaScript、CSS、HTML代码，压缩合并图片等。</li><li>代码分割：提取多个页面的公共代码，提取首屏不需要执行部分的代码让其异步加载（异步import）</li><li>模块合并：在webpack中，文件及模块，在采用模块化的项目中会有很多个模块，需要通过构建功能将模块分类合并成一个文件。</li><li>自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器（热加载）</li><li>代码校验：代码提交前需要通过代码校验、单元测试。</li><li>自动发布：更新代码后，自动构建出线上发布代码并传输给发布系统。</li></ol><p>各种构建工具各有优缺点，由于Node.js可以胜任所有的构建需求，所以大多数构建工具都是用Node.js开发出来的。</p><h2 id="npm-script" tabindex="-1">Npm Script <a class="header-anchor" href="#npm-script" aria-label="Permalink to &quot;Npm Script&quot;">​</a></h2><p><a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="noreferrer">Npm Script</a>是一个<strong>任务执行者</strong>。Npm是在安装Node.js时附带的包管理器，而Npm Script正是Npm内置的一个功能，允许在package.json文件中使用scripts字段定义任务（一段Shell脚本），执行的时候通过调用Shell去运行脚本命令。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node dev.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node build.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>优点：内置，不需要安装依赖； 缺点：功能太简单，即使提供了pre和post两个钩子，不能方便地管理多个任务之间的依赖；</p><p>pre和post钩子： 比如，运行 npm run test 的时候，分 3 个阶段</p><ul><li>检查scripts对象中是否存在pretest命令，如果有，先执行该命令</li><li>检查是否有test命令，有的话执行test命令，没有的话报错（这种情况pretest命令也不会执行）</li><li>检查是否存在posttest命令，如果有，则执行该命令</li></ul><h2 id="grunt" tabindex="-1">Grunt <a class="header-anchor" href="#grunt" aria-label="Permalink to &quot;Grunt&quot;">​</a></h2><p><a href="http://gruntjs.com" target="_blank" rel="noreferrer">Grunt</a>和Npm Script类似，也是一个任务执行者。Grunt有大量现成的插件封装了常见的任务，能管理项目间的依赖关系，自动化地执行依赖的任务，其配置放在Gruntfile.js文件中。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Gruntfile.js 将ES6转成ES5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 安装依赖 npm i grunt grunt-babel @babel/core @babel/preset-env -D</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">grunt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. 加载babel任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    grunt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadNpmTasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;grunt-babel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. 初始化配置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    grunt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        babel: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                sourceMap: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                presets: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            dist: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                files: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 打包目标目录 打包入口</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &#39;dist/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3. 注册任务 default指的是入口任务，它依赖babel任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    grunt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Grunt的优点：</p><ul><li>灵活，只负责执行定义的任务，一切可配置</li><li>常见的构建任务有大量现成的插件可用</li></ul><p>缺点：</p><ul><li>集成度不高，无法开箱即用，配置项太多，学习成本高。</li></ul><h2 id="gulp" tabindex="-1">Gulp <a class="header-anchor" href="#gulp" aria-label="Permalink to &quot;Gulp&quot;">​</a></h2><p><a href="http://gulpjs.com" target="_blank" rel="noreferrer">Gulp</a>是一个nodejs的<strong>stream</strong>流的自动化构建工具，支持管理、执行任务、监听文件、读写文件等功能，Gulp被设计得很简单，掌握下面这5种方法就几乎可以支持所有构建场景：</p><ul><li>gulp.task注册一个任务</li><li>gulp.run执行任务</li><li>gulp.watch监听文件的变化</li><li>gulp.src读取文件</li><li>gulp.dest写文件</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// gulpfile.js 将ES6转成ES5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 安装依赖 cnpm i gulp-cli gulp gulp-babel @babel/core @babel/preset-env  -D</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gulp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gulp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> babel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gulp-babel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// callback 支持异步</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defaultTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gulp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">babel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        presets: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gulp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.default </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultTask</span></span></code></pre></div><p>Gulp的优点：</p><ul><li>流式写法简单直观，API简单，代码量少，易于学习和使用</li><li>适合多页面应用开发</li></ul><p>缺点：</p><ul><li>异步处理比较麻烦</li><li>工作流程顺序难以精确控制（流是异步的）</li><li>不太适合单页或者自定义模块的开发（单页应用有各种各样的文件，比如图片、图标、字体，都要单独处理，不能像webpack那样一起处理）</li></ul><h2 id="fis3" tabindex="-1">Fis3 <a class="header-anchor" href="#fis3" aria-label="Permalink to &quot;Fis3&quot;">​</a></h2><p><a href="http://fis.baidu.com/" target="_blank" rel="noreferrer">Fis3</a>是一个来自百度的优秀国产构建工具，与Grunt、Gulp这些只提供了基本功能的工具，Fis3集成了Web开发中的常用构建功能，比如读写文件、资源定位、文件指纹、文件编译、压缩资源、图片合并等。</p><p>Fis3内置了很多功能，无须做太多配置就能完成大量工作。Fis3的优点是集成了各种Web开发所需的构建功能，配置简单、开箱即用。其缺点是目前官方已经不再更新和维护，不支持最新版本的Node.js。</p><h2 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;Webpack&quot;">​</a></h2><p>按照官方的定义，<strong><a href="https://webpack.js.org/" target="_blank" rel="noreferrer">webpack</a>是一个用于现代JavaScript应用程序的静态模块打包工具。当webpack处理应用程序时，它会在内部构建一个依赖图（dependency graph），此依赖图对应映射到项目所需的每个模块，并生成一个或多个bundle。</strong></p><p>在webpack中，一切文件皆模块，通过Loader进行文件转换，通过Plugin注入钩子，最后输入多个模块组合成的文件。Webpack专注于构建模块化项目（大型SPA项目的模块化构建）。</p><p>webpack可以将按需加载的模块进行代码分割，等到实际需要用到的时候再异步加载。它的定位是<strong>模块打包器</strong>，而Gulp/Grunt/Fis3属于<strong>构建工具</strong>。</p><p>webpack的优点：</p><ul><li>专注于处理模块化的项目，适配任何模块系统，能做到开箱即用、一步到位，webpack支持零配置；</li><li>webpack拥有强大的插件（Plugin），完整好用又不失灵活；</li><li>社区庞大灵活，经常引入紧跟时代发展的新特性，能为大多数场景找到已有的开源扩展。</li><li>面向开发应用的特性支持HMR，按需加载，公共模块提取</li><li>简化Web开发的环节，图片自动转base64，资源的缓存（添加chunkId）</li></ul><p>webpack的缺点：</p><ul><li>只能用于采用模块化开发的项目；</li><li>学习成本高，配置复杂（相对来说，学习起来比Rollup简单，比Grunt难一些）；</li><li>通过babel编译后的js代码打包后体积过大。</li></ul><h2 id="rollup" tabindex="-1">Rollup <a class="header-anchor" href="#rollup" aria-label="Permalink to &quot;Rollup&quot;">​</a></h2><p><a href="https://rollupjs.org" target="_blank" rel="noreferrer">Rollup</a>是一个专注于ES6的模块打包工具，构建出<strong>结构扁平，性能出众</strong>的类库。它的亮点在于，能针对ES6源码进行Tree Shaking，以去除那些已定义但没有使用的代码，减少输出文件的大小。Rollup的使用方法和Webpack类似，它们的区别如下：</p><ul><li>一般而言，对于应用使用Webpack，对于类库使用Rollup</li><li>需要代码拆分（Code Splitting），或者需要处理很多静态资源，又或者需要引入很多commonjs模块的依赖时，使用Webpack，而Rollup不支持Code Splitting</li><li>Rollup在功能、生态链上不如Webpack完善，但其配置和使用更简单（webpack配置工程师）。</li></ul><p>rollup的优点：</p><ul><li>构架高性能的模块文件，这正是类库所需要的</li><li>编译出来的代码可读性好，内容更小，执行效率更高</li><li>配置比较简单</li></ul><h2 id="parcel" tabindex="-1">Parcel <a class="header-anchor" href="#parcel" aria-label="Permalink to &quot;Parcel&quot;">​</a></h2><p><a href="https://www.parceljs.cn/" target="_blank" rel="noreferrer">Parcel</a>是快速、零配置的Web应用程序打包器，它目前只能构建用于运行在浏览器中的网页，这也是它的出发点和专注点。</p><p>Parcel的优点：</p><ul><li>Parcel内置了常见场景的构建方案及其依赖，无需再安装各种依赖；</li><li>Parcel能以HTML为入口，自动检测和打包依赖资源；</li><li>Parcel默认支持模块热替换，真正的开箱即用</li></ul><p>Parcel的缺点：</p><ul><li>不支持SourceMap</li><li>不支持Tree Shaking</li><li>配置不灵活</li></ul><h2 id="为什么选择了webpack" tabindex="-1">为什么选择了Webpack？ <a class="header-anchor" href="#为什么选择了webpack" aria-label="Permalink to &quot;为什么选择了Webpack？&quot;">​</a></h2><ul><li>大多数团队在开发新项目时会采用紧跟时代的技术，即“模块化+新语言+新框架”，Webpack正好可以为新项目提供一站式的解决方案；</li><li>Webpack有良好的生态链和维护团队，能提供良好的开发体验并保证质量；</li><li>Webpack在全世界使用者众多，学习资料丰富。</li></ul>`,48)]))}const g=i(p,[["render",e]]);export{c as __pageData,g as default};

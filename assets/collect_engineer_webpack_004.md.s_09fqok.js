import{_ as c,c as a,o,ae as l}from"./chunks/framework.CLNW5JS9.js";const b=JSON.parse('{"title":"004 webpack5的升级改动","description":"","frontmatter":{"title":"004 webpack5的升级改动","date":"2021-08-12T00:00:00.000Z","categories":["Webpack"],"tags":["Webpack"],"sidebar":"auto"},"headers":[],"relativePath":"collect/engineer/webpack/004.md","filePath":"collect/engineer/webpack/004.md"}'),d={name:"collect/engineer/webpack/004.md"};function i(r,e,t,n,s,p){return o(),a("div",null,e[0]||(e[0]=[l('<h2 id="webpack5以及周边插件的改动" tabindex="-1">webpack5以及周边插件的改动 <a class="header-anchor" href="#webpack5以及周边插件的改动" aria-label="Permalink to &quot;webpack5以及周边插件的改动&quot;">​</a></h2><ul><li>package.json的dev-server命令改为<code>webpack serve</code></li><li>合并webpack配置插件webpack-merge导出的合并函数由<code>smart</code>变成了<code>merge</code>，<code>const { merge } = require(&#39;webpack-merge&#39;)</code></li><li>从<code>const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;)</code>改为<code>const { CleanWebpackPlugin } = require(&#39;clean-webpack-plugin&#39;)</code></li><li><code>module.rules</code>中<code>loader: [&#39;xxx-loader&#39;]</code>换成<code>use: [&#39;xxx-loader&#39;]</code></li><li><code>filename: &#39;bundle.[contenthash:8].js&#39;</code>其中<code>h</code>换成小写，大写无效</li></ul><h2 id="webpack5新特性" tabindex="-1">webpack5新特性 <a class="header-anchor" href="#webpack5新特性" aria-label="Permalink to &quot;webpack5新特性&quot;">​</a></h2><ol><li>持久化缓存</li><li>资源模块</li><li><code>moduleIds</code>和<code>chunkIds</code>的优化</li><li>更强大的<code>tree shaking</code></li><li>移除nodejs的<code>polyfill</code></li><li>支持生成<code>es6/es2015</code>的代码</li><li><code>SplitChunk</code>和模块大小</li><li>模块联邦<code>Module Federation</code></li></ol>',4)]))}const u=c(d,[["render",i]]);export{b as __pageData,u as default};

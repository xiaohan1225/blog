import{_ as a,c as o,o as n,ae as p}from"./chunks/framework.BAYqcHKv.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"collect/engineer/pnpm.md","filePath":"collect/engineer/pnpm.md"}'),r={name:"collect/engineer/pnpm.md"};function t(i,e,l,d,s,c){return n(),o("div",null,e[0]||(e[0]=[p('<h2 id="什么是-pnpm" tabindex="-1">什么是 pnpm？ <a class="header-anchor" href="#什么是-pnpm" aria-label="Permalink to &quot;什么是 pnpm？&quot;">​</a></h2><p><code>pnpm</code> 是对标 <code>npm、yarn</code>的 <code>node</code> 包管理器。</p><h2 id="pnpm-的优势" tabindex="-1">pnpm 的优势 <a class="header-anchor" href="#pnpm-的优势" aria-label="Permalink to &quot;pnpm 的优势&quot;">​</a></h2><h3 id="可以大大节约磁盘空间" tabindex="-1">可以大大节约磁盘空间 <a class="header-anchor" href="#可以大大节约磁盘空间" aria-label="Permalink to &quot;可以大大节约磁盘空间&quot;">​</a></h3><p>pnpm 的安装包是以全局的方式进行存储的，存储目录为<code>~/.pnpm-store</code>，这样的话，相同的包在只会安装一次，然后通过硬链接（<code>Hard Links</code>）机制，将项目的 <code>node_modules</code> 中的包通过硬链接指向全局 store 存储。</p><p>得益于内部采用了硬链接（<code>Hard Links</code>）机制，</p><h3 id="安装速度快" tabindex="-1">安装速度快 <a class="header-anchor" href="#安装速度快" aria-label="Permalink to &quot;安装速度快&quot;">​</a></h3><p>创建非扁平化的 <code>node_modules</code> 文件夹，目录结构很清晰。</p><h3 id="内置-monorepo-支持" tabindex="-1">内置 monorepo 支持 <a class="header-anchor" href="#内置-monorepo-支持" aria-label="Permalink to &quot;内置 monorepo 支持&quot;">​</a></h3><p>pnpm 提出了 <code>workspace</code> 的概念，内置了对 <code>monorepo</code> 的支持。</p><h3 id="管理-node-js-版本" tabindex="-1">管理 Node.js 版本 <a class="header-anchor" href="#管理-node-js-版本" aria-label="Permalink to &quot;管理 Node.js 版本&quot;">​</a></h3><h2 id="pnpm的安装为什么那么快" tabindex="-1">pnpm的安装为什么那么快？ <a class="header-anchor" href="#pnpm的安装为什么那么快" aria-label="Permalink to &quot;pnpm的安装为什么那么快？&quot;">​</a></h2><h3 id="硬链接机制" tabindex="-1">硬链接机制 <a class="header-anchor" href="#硬链接机制" aria-label="Permalink to &quot;硬链接机制&quot;">​</a></h3><p>pnpm 有一</p><h2 id="为什么用-pnpm-取代之前的-lerna-呢" tabindex="-1">为什么用 pnpm 取代之前的 lerna 呢? <a class="header-anchor" href="#为什么用-pnpm-取代之前的-lerna-呢" aria-label="Permalink to &quot;为什么用 pnpm 取代之前的 lerna 呢?&quot;">​</a></h2><ul><li>lerna 已经不再维护，后续有任何问题社区无法及时响应</li><li>pnpm装包效率更高，并且可以节约更多磁盘空间</li><li>pnpm本身就预置了对monorepo的支持，不需要再额外第三方包的支持</li></ul><h2 id="只允许-pnpm" tabindex="-1">只允许 pnpm <a class="header-anchor" href="#只允许-pnpm" aria-label="Permalink to &quot;只允许 pnpm&quot;">​</a></h2><p>如果不希望开发者使用 npm 或者 yarn 等其它包管理工具安装依赖，可以在 <code>package.json</code> 添加如下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;preinstall&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npx only-allow pnpm&quot;</span></span></code></pre></div>',19)]))}const u=a(r,[["render",t]]);export{m as __pageData,u as default};

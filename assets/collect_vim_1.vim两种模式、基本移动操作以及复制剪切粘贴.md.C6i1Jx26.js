import{_ as s,c as a,o as l,ae as n}from"./chunks/framework.7E1nAy7n.js";const d=JSON.parse('{"title":"vim两种模式、基本移动操作以及复制剪切粘贴","description":"","frontmatter":{},"headers":[],"relativePath":"collect/vim/1.vim两种模式、基本移动操作以及复制剪切粘贴.md","filePath":"collect/vim/1.vim两种模式、基本移动操作以及复制剪切粘贴.md"}'),t={name:"collect/vim/1.vim两种模式、基本移动操作以及复制剪切粘贴.md"};function e(h,i,p,k,r,o){return l(),a("div",null,[...i[0]||(i[0]=[n(`<h1 id="vim两种模式、基本移动操作以及复制剪切粘贴" tabindex="-1">vim两种模式、基本移动操作以及复制剪切粘贴 <a class="header-anchor" href="#vim两种模式、基本移动操作以及复制剪切粘贴" aria-label="Permalink to &quot;vim两种模式、基本移动操作以及复制剪切粘贴&quot;">​</a></h1><h2 id="_1、安装" tabindex="-1">1、安装 <a class="header-anchor" href="#_1、安装" aria-label="Permalink to &quot;1、安装&quot;">​</a></h2><p>vscode安装插件vim</p><h2 id="_2、insert-插入-模式和normal-正常-模式" tabindex="-1">2、insert（插入）模式和normal（正常）模式 <a class="header-anchor" href="#_2、insert-插入-模式和normal-正常-模式" aria-label="Permalink to &quot;2、insert（插入）模式和normal（正常）模式&quot;">​</a></h2><p>默认情况下，启动 vim 就会进入<strong>normal模式</strong></p><ul><li>进入<code>insert</code>模式：按i和a都能进入insert（插入）模式，区别在于i是在光标前插入，a是在光标后插入</li><li>退出insert模式 <ul><li><code>esc</code></li><li>组合键：<code>ctrl + [</code></li></ul></li></ul><h2 id="_3、终端如何退出vim" tabindex="-1">3、终端如何退出vim <a class="header-anchor" href="#_3、终端如何退出vim" aria-label="Permalink to &quot;3、终端如何退出vim&quot;">​</a></h2><ul><li>:wq 退出并保存</li><li>:q 退出不保存</li></ul><h2 id="_4、基本移动" tabindex="-1">4、基本移动 <a class="header-anchor" href="#_4、基本移动" aria-label="Permalink to &quot;4、基本移动&quot;">​</a></h2><p>上：k 下：j 左：h 右：l 下一行的行首: enter</p><h2 id="_5、行操作" tabindex="-1">5、行操作 <a class="header-anchor" href="#_5、行操作" aria-label="Permalink to &quot;5、行操作&quot;">​</a></h2><p>移动：</p><ul><li>行首 <ul><li>0</li><li>^：到本行第一个不是blank字符的位置（blank：空格、tab、换行、回车等）</li></ul></li><li>行尾 <ul><li>$</li><li>g_：到本行最后一个不是blank字符的位置</li></ul></li></ul><p>改键：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vscode settings.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把H改成^，L改成g+_</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// normal模式</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vim.normalModeKeyBindings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;H&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;L&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按下一个operator的时候，会进入一个pending的状态，比如你按下d，就会进入pending状态，等待后续的动词输入</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vim.operatorPendingModeKeyBindings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;H&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;L&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>插入：</p><ul><li>行首：I</li><li>行尾：A</li><li>行前：O</li><li>行后：o</li></ul><h2 id="_6、复制" tabindex="-1">6、复制 <a class="header-anchor" href="#_6、复制" aria-label="Permalink to &quot;6、复制&quot;">​</a></h2><ul><li>y：复制文本</li><li>yy：复制当前行</li><li>yiw: 复制（yank）当前单词；</li><li>yw: 复制从当前光标的位置到下一个单词的开头；</li><li>yb: 复制从当前光标的位置到上一个单词的末尾；</li><li>yy: 复制整行（包括换行符）；</li><li>4yy: 复制4行（包括换行符）；</li><li>y$: 复制从当前光标的位置到行尾。</li></ul><h2 id="_7、删除-剪切" tabindex="-1">7、删除/剪切 <a class="header-anchor" href="#_7、删除-剪切" aria-label="Permalink to &quot;7、删除/剪切&quot;">​</a></h2><ul><li>d：删除文本，但是它也会同时被复制到了你的剪切板中</li><li>diw: 删除（剪切）当前单词；</li><li>dw: 删除（剪切）从光标的位置到下一个单词的开头；</li><li>db: 删除（剪切）从贯标的位置到上一个单词的末尾；</li><li>dd: 删除（剪切）一张行（包括换行符）；</li><li>4dd: 删除（剪切）4行（包括换行符）；</li><li>d$: 删除（剪切）从光标的位置到当前行的末尾；</li><li>d^: 删除（剪切）从光标的位置到当前行的开头。</li><li></li></ul><h2 id="_8、粘贴" tabindex="-1">8、粘贴 <a class="header-anchor" href="#_8、粘贴" aria-label="Permalink to &quot;8、粘贴&quot;">​</a></h2><ul><li>小写p：在光标后粘贴</li><li>大写P：在光标前粘贴</li></ul><blockquote><p>在按 P 之前键入一个数字，可以多次粘贴同一文本。假设您键入 4p，相同的文本将粘贴4次。</p></blockquote>`,24)])])}const u=s(t,[["render",e]]);export{d as __pageData,u as default};

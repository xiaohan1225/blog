import{_ as e,c as a,o as i,ae as r}from"./chunks/framework.BHrE6nLq.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"collect/engineer/webpack/webpack常见问题.md","filePath":"collect/engineer/webpack/webpack常见问题.md"}'),o={name:"collect/engineer/webpack/webpack常见问题.md"};function n(t,l,u,d,c,h){return i(),a("div",null,l[0]||(l[0]=[r('<h2 id="前端为何要进行打包和构建" tabindex="-1">前端为何要进行打包和构建 <a class="header-anchor" href="#前端为何要进行打包和构建" aria-label="Permalink to &quot;前端为何要进行打包和构建&quot;">​</a></h2><h3 id="代码层面" tabindex="-1">代码层面 <a class="header-anchor" href="#代码层面" aria-label="Permalink to &quot;代码层面&quot;">​</a></h3><ul><li>体积更小（Tree-Shaking、压缩、合并），加载更快</li><li>编译高级语言或语法（TS、ES6+，模块化，scss）</li><li>兼容性和错误检查（Polyfill、postcss、eslint）</li></ul><h3 id="研发流程方面" tabindex="-1">研发流程方面 <a class="header-anchor" href="#研发流程方面" aria-label="Permalink to &quot;研发流程方面&quot;">​</a></h3><ul><li>统一、高效的开发环境</li><li>统一的构建流程和产出标准</li><li>集成贵公司构建规范（提测、上线等）</li></ul><h2 id="module、chunk、bundle的区别" tabindex="-1">module、chunk、bundle的区别 <a class="header-anchor" href="#module、chunk、bundle的区别" aria-label="Permalink to &quot;module、chunk、bundle的区别&quot;">​</a></h2><ul><li>module-各个源码文件，webpack中一切皆模块</li><li>chunk-多模板合并成的，如entry import() splitChunk</li><li>bundle-最终的输出文件</li></ul><h2 id="loader和plugin的区别" tabindex="-1">loader和plugin的区别 <a class="header-anchor" href="#loader和plugin的区别" aria-label="Permalink to &quot;loader和plugin的区别&quot;">​</a></h2><ul><li>loader模块转换器，如less -&gt; css</li><li>plugin扩展插件，如HtmlWebpackPlugin</li></ul><h2 id="常见的loader和plugin有哪些" tabindex="-1">常见的loader和plugin有哪些 <a class="header-anchor" href="#常见的loader和plugin有哪些" aria-label="Permalink to &quot;常见的loader和plugin有哪些&quot;">​</a></h2><h3 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;loader&quot;">​</a></h3><ul><li>babel-loader</li><li>eslint-loader</li><li>file-loader</li><li>url-loader</li><li>css-loader</li><li>less-loader</li><li>sass-loader</li></ul><h3 id="plugin" tabindex="-1">plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;plugin&quot;">​</a></h3><ul><li>HtmlWebpackPlugin</li><li>DefinePlugin</li></ul><h2 id="webpack构建流程" tabindex="-1">webpack构建流程 <a class="header-anchor" href="#webpack构建流程" aria-label="Permalink to &quot;webpack构建流程&quot;">​</a></h2><ul><li>初始化参数，从shell脚本读取参数与配置文件进行合并，得到最终的配置对象</li><li>用上一步得到的配置对象，创建compiler对象，加载所有配置的参数，执行compiler对象的run方法进行编译</li><li>确定入口，根据配置中的entry找出所有的入口文件</li><li>编译模块，从入口模块出发，调用所有配置的loader对模块进行编译，再找出模块依赖的模块</li><li>输出资源，根据入口和模块的关系，打包成一个个的chunk，再把chunk转换成一个个单独的文件加入到输出列表</li><li>写入文件</li></ul>',16)]))}const b=e(o,[["render",n]]);export{p as __pageData,b as default};

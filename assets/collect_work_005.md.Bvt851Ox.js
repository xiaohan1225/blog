import{_ as o,c,o as t,ae as a}from"./chunks/framework.BHrE6nLq.js";const h=JSON.parse('{"title":"005 废弃代码删除工具总结","description":"","frontmatter":{"title":"005 废弃代码删除工具总结","date":"2021-10-7","categories":["工作总结"],"tags":["工作总结"],"sidebar":"auto"},"headers":[],"relativePath":"collect/work/005.md","filePath":"collect/work/005.md"}'),d={name:"collect/work/005.md"};function l(r,e,s,i,n,u){return t(),c("div",null,e[0]||(e[0]=[a('<h2 id="遇到的问题和如何解决的" tabindex="-1">遇到的问题和如何解决的 <a class="header-anchor" href="#遇到的问题和如何解决的" aria-label="Permalink to &quot;遇到的问题和如何解决的&quot;">​</a></h2><p>问题一：如何检测未使用的exports（即在本文件和其它文件都未使用的exports变量）？</p><ul><li><a href="https://github.com/typescript-eslint/typescript-eslint" target="_blank" rel="noreferrer">typescript-eslint</a>的<code>no-unused-vars</code>规则可以检测出在当前文件未使用的变量，但默认会排除exports出去的变量</li><li><a href="https://github.com/pzavolinsky/ts-unused-exports" target="_blank" rel="noreferrer">ts-unused-exports</a>可以静态分析出未使用的exports</li><li>先用<code>ts-unused-exports</code>分析出哪些文件中哪些变量未使用，将这些信息以参数方式传入<code>eslint</code>的<code>rules</code>中。传入时将未使用的变量做成一个正则，比如1.js文件的a、b两个变量未使用，传入的参数为{ filename: &#39;c:\\1.js&#39;, varsIgnorePattern: &#39;^a$|^b$&#39; }</li><li>不过不能在直接修改<code>typescript-eslint</code>中<code>no-unused-vars</code>规则的源码，需要自己写一个eslint插件，将原来<code>no-unused-vars</code>的代码fork一份，再其基础上写一个新<code>rules</code>。开发<code>eslint plugin</code>可以参考<a href="https://zhuanlan.zhihu.com/p/372181145" target="_blank" rel="noreferrer">文档</a></li></ul><p>问题二：如何修复未使用的变量、函数等？</p><ul><li>采用<code>eslint</code>的<code>fixer</code>，<code>fixer</code>的编写参考了<a href="https://github.com/aladdin-add/eslint-plugin/blob/master/packages/autofix/lib/rules/no-unused-vars.js" target="_blank" rel="noreferrer">文件</a></li></ul><p>问题三：如何调试eslint的检测和修复？</p><ul><li>我在<code>eslint</code>的官网中找到了一些<a href="http://eslint.cn/docs/developer-guide/nodejs-api#cliengine" target="_blank" rel="noreferrer">api</a>，可以断点调试</li></ul><h2 id="觉得那些地方做的不好" tabindex="-1">觉得那些地方做的不好？ <a class="header-anchor" href="#觉得那些地方做的不好" aria-label="Permalink to &quot;觉得那些地方做的不好？&quot;">​</a></h2><ol><li>修改<code>typescript-eslint</code>中<code>no-unused-vars</code>规则的源码时，由于其<code>packages</code>引入关系复杂，所以直接修改了其打包后的源码，这样的话以后如果这块源码改了的话，不太好升级。</li></ol><h2 id="不能删除的内容及原因" tabindex="-1">不能删除的内容及原因 <a class="header-anchor" href="#不能删除的内容及原因" aria-label="Permalink to &quot;不能删除的内容及原因&quot;">​</a></h2><ol><li><code>const {a} = b;</code>和<code>function foo({a = {}}) {}</code> 第一个修复结果为<code>const {} = b;</code>。这里即使a没用到，也不能把整行全部删除，因为可能这一行会有<strong>副作用</strong>，比如<code>const {a} = b();</code>，如果是<code>const {a = f()} = b;</code>这种情况，a也不能够删除，也就不能进行任何修复了。</li></ol><p>第二个无法修复，原因是这种形参的默认值也可能产生副作用，比如<code>function foo({a = b()}) {}</code>或<code>function foo({a = {b:b()}}) {}</code></p><ol start="2"><li><p><code>function foo(a, {b}, {c}) {};</code> 修复结果为<code>function foo(a, {}) {};</code>。这里我是判断如果是函数的最后一个参数、解构的也只有一个属性，并且这个属性没用到，就会把属性和<code>{}</code>整体删除掉，但<code>eslint</code>的修复顺序是从左到右的，所以先检测b后检测c，所以b修复后会留下一个<code>{}</code></p></li><li><p><code>class</code>语法没做修复处理，因为项目用的比较少。</p></li></ol><h2 id="完成后觉得有哪些收获" tabindex="-1">完成后觉得有哪些收获 <a class="header-anchor" href="#完成后觉得有哪些收获" aria-label="Permalink to &quot;完成后觉得有哪些收获&quot;">​</a></h2><ul><li>由于解析ts和js文件用的是<code>@typescript-eslint/parser</code>，了解它的<code>ast</code></li><li>熟悉了<code>eslint</code>检测修复、开发<code>eslint插件</code>过程</li><li>对<code>工具</code>的开发流程有了一定的认识</li></ul><h2 id="未来可以扩展的功能" tabindex="-1">未来可以扩展的功能 <a class="header-anchor" href="#未来可以扩展的功能" aria-label="Permalink to &quot;未来可以扩展的功能&quot;">​</a></h2><ul><li>目前只支持了<code>.js</code>,<code>.jsx</code>,<code>.ts</code>,<code>.tsx</code>废弃文件检测，可以通过修改<code>ts-unused-exports</code>源码支持其它类型比如<code>.less</code>,<code>.jpg</code>等；</li><li>删除代码后可以使用<code>prettier API</code>格式化代码</li><li>建立<code>回收站</code>，专门收集工具删除过的废弃文件</li></ul>',17)]))}const f=o(d,[["render",l]]);export{h as __pageData,f as default};

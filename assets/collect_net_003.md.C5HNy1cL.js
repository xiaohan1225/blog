import{_ as e,c as a,o,ae as r}from"./chunks/framework.DaakH-K9.js";const d=JSON.parse('{"title":"003 HTTP的请求方法","description":"","frontmatter":{"title":"003 HTTP的请求方法","date":"2021-07-21T00:00:00.000Z","categories":["网络协议"],"tags":["HTTP"],"sidebar":"auto"},"headers":[],"relativePath":"collect/net/003.md","filePath":"collect/net/003.md"}'),l={name:"collect/net/003.md"};function T(i,t,n,s,p,P){return o(),a("div",null,t[0]||(t[0]=[r('<h2 id="http-1-1的8种请求方法" tabindex="-1">HTTP/1.1的8种请求方法 <a class="header-anchor" href="#http-1-1的8种请求方法" aria-label="Permalink to &quot;HTTP/1.1的8种请求方法&quot;">​</a></h2><p>目前HTTP/1.1规定了8种方法，单词都必须是<strong>大写</strong>的形式。</p><ol><li>GET：获取资源，用来读取或下载数据</li><li>HEAD：获取资源的元信息，可用来判断服务器上是否存在某个资源</li><li>POST：向服务器提交数据，用来写入或上传数据</li><li>PUT：与POST类似，常用于修改某个资源</li><li>DELETE：删除资源</li><li>CONNECT：建立特殊的连接隧道</li><li>OPTIONS：预检请求，获取服务器对资源支持的请求方法</li><li>TRACE：追踪请求-响应的传输路径</li></ol><h2 id="get-head" tabindex="-1">GET/HEAD <a class="header-anchor" href="#get-head" aria-label="Permalink to &quot;GET/HEAD&quot;">​</a></h2><p>这两个请求方法比较类似，可以放在一起来说。</p><p><strong>GET</strong>方法从HTTP/0.9版出现至今，名副其实的“元老”，它的含义是<strong>从服务器获取资源</strong>。</p><p>GET方法虽然动作简单，但搭配URI和其它头字段可以对资源更精确的操作。</p><ul><li>在URI后使用“#”，在HTML这被称为“锚点”，就可以在获取页面后直接定位到某个标签所在的位置</li><li>使用“If-Modified-Since”字段就变成了“有条件的请求”，是实现协商缓存的重要字段</li><li>使用“Range”字段就变成了“范围请求”，只获取资源的一部分</li></ul><p><strong>HEAD</strong>方法与GET方法类似，也是请求获取资源，但与GET不同的是，服务器不会返回请求的实体数据，只会传回响应头，也就是资源的<strong>元信息</strong>。</p><p>HEAD比GET更加轻量，在很多不需要真正需要资源的场景很适用，比如检测服务器上是否存在某个资源，或者检查文件是否有最新版本，服务器在响应头里把文件的修改时间传回来。</p><h2 id="post-put" tabindex="-1">POST/PUT <a class="header-anchor" href="#post-put" aria-label="Permalink to &quot;POST/PUT&quot;">​</a></h2><p>GET和HEAD是从服务器获取数据，而<strong>POST</strong>和<strong>PUT</strong>则是相反操作，通过报文的body携带数据，然后向URI指定的资源提交数据。</p><p>PUT的作用与POST类似，也是向服务器提交数据，与POST的不同之处在与，POST通常表示的是“新建”、“create”的含义，而PUT则是“修改”、“update”的含义。</p><h2 id="其它方法" tabindex="-1">其它方法 <a class="header-anchor" href="#其它方法" aria-label="Permalink to &quot;其它方法&quot;">​</a></h2><p>除了GET、HEAD、POST、PUT，还有4个标准请求方法，但它们用的不是很多。</p><p><strong>DELETE</strong>方法：删除资源，由于这个动作风险太大，所以通常服务器不会执行真的删除操作，而是对资源做一个删除标记，即软删除。</p><p><strong>CONNECT</strong>方法：要求服务器为客户端和另一台远程服务器建立一条特殊的连接隧道，这是Web服务器即充当一个代理的角色。</p><p><strong>OPTIONS</strong>方法：要求服务器列出可对资源实行的操作方法，在响应头的Allow字段里返回，即预检请求。</p><p><strong>TRACE</strong>方法：是对HTTP链路的测试或诊断，可以显示请求-响应的传输路径。它存在漏洞，会泄露网站的信息，所以Web服务器通常会禁止使用它。</p><blockquote><p>虽然HTTP/1.1里只规定了这8种请求方法，但由于HTTP良好的扩展性，我们可以自定义请求方法，只要请求和响应双方都能理解即可。</p></blockquote>',20)]))}const E=e(l,[["render",T]]);export{d as __pageData,E as default};

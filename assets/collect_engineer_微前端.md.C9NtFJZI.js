import{_ as e,c as o,o as i,ae as r}from"./chunks/framework.DaakH-K9.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"collect/engineer/微前端.md","filePath":"collect/engineer/微前端.md"}'),l={name:"collect/engineer/微前端.md"};function t(n,a,s,d,c,h){return i(),o("div",null,a[0]||(a[0]=[r('<h2 id="说说微前端架构整体演进过程和架构" tabindex="-1">说说微前端架构整体演进过程和架构 <a class="header-anchor" href="#说说微前端架构整体演进过程和架构" aria-label="Permalink to &quot;说说微前端架构整体演进过程和架构&quot;">​</a></h2><p>项目痛点：</p><ol><li>项目代码量非常大，巨石项目</li><li>不同技术栈维护成本高</li><li>复用层</li></ol><p>解决方案：</p><ol><li>iframe</li><li>single-spa、qiankun，不同子项目子应用接入到统一平台</li><li>微前端体系设计</li></ol><h2 id="iframe-传统嵌入式方式" tabindex="-1">iframe 传统嵌入式方式 <a class="header-anchor" href="#iframe-传统嵌入式方式" aria-label="Permalink to &quot;iframe 传统嵌入式方式&quot;">​</a></h2><h3 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p>早期的微前端架构是通过 <code>iframe</code> 来实现的，其本质上就是在一个页面内嵌入另一个网页，从而实现多个应用在同一个网页展示的效果。</p><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><p>需要将外部应用嵌入到当前页面，比如在企业级系统中，可能需要将不同业务模块嵌入到同一个页面内，实现功能的“整合”。</p><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><ol><li><strong>独立性</strong>：每个 <code>iframe</code> 都是一个独立的页面，有自己生命周期和上下文，可以独立运行，独立开发，独立部署，互不干扰。</li><li><strong>实现简单</strong>：只需要通过 <code>iframe</code> 标签即可实现，无需复杂的配置和代码。</li></ol><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><ol><li><strong>性能问题</strong>：<code>iframe</code> 性能开销大，多个页面嵌套时，加载很慢。</li><li><strong>难以通信和状态共享</strong>：<code>iframe</code> 是独立的页面，互相隔离，导致应用间的通信和状态共享变得困难。</li><li><strong>跨域问题</strong>：<code>iframe</code> 和父页面之间可能存在跨域问题，需要额外处理。</li></ol><h2 id="single-spa" tabindex="-1">single-spa <a class="header-anchor" href="#single-spa" aria-label="Permalink to &quot;single-spa&quot;">​</a></h2><h3 id="背景-1" tabindex="-1">背景 <a class="header-anchor" href="#背景-1" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p>随着单页面应用（SPA）的发展流行，微前端(<code>micro frontends</code>)的概念逐渐被提出，<code>single-spa</code> 是一个用于微前端架构的 JavaScript 库，它提供了一种统一的方式来管理和协调多个独立应用。</p><h3 id="使用场景-1" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景-1" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p><code>single-spa</code> 提供了一个加载和管理多个子应用的机制，这些子应用可以是不同的框架和库，比如 React、Vue、Angular 等。每个应用都可以独立开发、部署和更新，而不会影响到其他应用。</p><h3 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li><strong>框架无关性</strong>：支持多种前端框架，包括 React、Vue、Angular 等。</li><li><strong>高效加载</strong>：通过路由和生命周期管理，在合适的时机加载和卸载子应用，提高性能。</li><li><strong>应用间隔离</strong>: 子应用之间相互隔离，互不干扰。</li></ol><h3 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ol><li><strong>配置复杂</strong>：需要配置路由和生命周期管理，对于新手来说可能比较复杂。</li><li><strong>性能问题</strong>：由于各个应用是独立的，应用间的资源可能会重复加载，无法服用，增加内存和网络请求开销。</li></ol><h2 id="qiankun" tabindex="-1">qiankun <a class="header-anchor" href="#qiankun" aria-label="Permalink to &quot;qiankun&quot;">​</a></h2><h3 id="背景-2" tabindex="-1">背景 <a class="header-anchor" href="#背景-2" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p><code>qiankun</code> 是一个基于 <code>single-spa</code> 的微前端框架，它提供了一种简单易用的方式来管理和协调多个子应用。<code>qiankun</code> 的目标是让开发者能够轻松地构建一个由多个独立应用组成的大型应用。</p><h3 id="使用场景-2" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景-2" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p><code>qiankun</code> 是一个很强大的微前端框架，能够轻松实现子应用的注册、加载、卸载等操作，以及应用间的通信和状态共享。</p><h3 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li><strong>强大的生命周期管理</strong>：在应用的注册、加载、卸载等过程中可以通过生命周期定义逻辑。</li><li><strong>动态加载子应用</strong>：支持子应用的动态加载和按需加载，提高了性能。</li><li><strong>内置的跨框架支持</strong>：支持 React、Vue、Angular 等各种框架。</li></ul><h3 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li><strong>学习曲线</strong>： 虽然它封装了很多便捷功能，但配置和使用仍然需要一定的学习成本。</li><li><strong>应用间隔离问题</strong>：子应用的隔离仍然需要一定的技术支持，比如避免 CSS 和 JavaScript 的冲突。</li></ul>',32)]))}const q=e(l,[["render",t]]);export{g as __pageData,q as default};

import{_ as d,c as e,o as a,ae as i}from"./chunks/framework.7E1nAy7n.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"collect/interview/复习/4.css.md","filePath":"collect/interview/复习/4.css.md"}'),l={name:"collect/interview/复习/4.css.md"};function r(o,t,s,c,n,h){return a(),e("div",null,[...t[0]||(t[0]=[i('<h2 id="选择器权重和样式优先级" tabindex="-1">选择器权重和样式优先级 <a class="header-anchor" href="#选择器权重和样式优先级" aria-label="Permalink to &quot;选择器权重和样式优先级&quot;">​</a></h2><p>css各选择器权重（从高到低）：</p><table tabindex="0"><thead><tr><th>选择器名称</th><th>选择器格式</th><th>权重</th></tr></thead><tbody><tr><td>id选择器</td><td>#id</td><td>100</td></tr><tr><td>类选择器</td><td>.classname</td><td>10</td></tr><tr><td>属性选择器</td><td>[attr=value]</td><td>10</td></tr><tr><td>伪类选择器</td><td>li:first-child</td><td>10</td></tr><tr><td>标签选择器</td><td>a</td><td>1</td></tr><tr><td>伪元素选择器</td><td>div::after</td><td>1</td></tr><tr><td>相邻兄弟选择器</td><td>div+div</td><td>0</td></tr><tr><td>子选择器</td><td>div &gt; a</td><td>0</td></tr><tr><td>后代选择器</td><td>div a</td><td>0</td></tr><tr><td>通配符选择器</td><td>*</td><td>0</td></tr></tbody></table><ul><li><code>style内联样式</code>的权重为<code>1000</code>。</li><li>权重相同，后出现的覆盖前面。</li></ul><h2 id="css隐藏元素的方法有哪些" tabindex="-1">css隐藏元素的方法有哪些？ <a class="header-anchor" href="#css隐藏元素的方法有哪些" aria-label="Permalink to &quot;css隐藏元素的方法有哪些？&quot;">​</a></h2><ol><li><code>display:none</code>: 元素不会渲染，不占据空间，也不响应绑定的事件。</li><li><code>opacity: 0</code>: 将元素的透明度设置为0，进而让元素从视觉上消失，但元素仍然会占据空间，并且会响应绑定的事件。</li><li><code>visibility: hidden</code>: 这种方式隐藏会让元素依旧占据空间，但不会响应事件。</li><li><code>position: absolute;left: -9999px;top: -9999px;</code>: 利用绝对定位将元素移到屏幕外。</li><li><code>z-index: -9999</code>: 降低元素层级，让当前元素被其它元素覆盖，间接达到元素隐藏的目的。</li><li><code>overflow: hidden</code>: 超出该元素范围内的元素将会隐藏显示。</li><li><code>clip-path: inset(100%)(向内裁剪100%)</code>或者<code>clip-path: circle(0)(半径为0的圆形)</code>: 使用元素裁剪来实现元素隐藏。</li><li><code>transform: scale(0,0)</code>: 利用css3的元素缩放能力，将元素缩放为0来实现元素的隐藏。</li></ol><h2 id="link和-import的区别" tabindex="-1">link和@import的区别 <a class="header-anchor" href="#link和-import的区别" aria-label="Permalink to &quot;link和@import的区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>link标签</th><th>@import</th></tr></thead><tbody><tr><td>所属标准</td><td>XHTML/HTML标准</td><td>CSS标准</td></tr><tr><td>引用内容类型</td><td>可用于引入 CSS、RSS、图标等多种资源</td><td>仅支持css样式</td></tr><tr><td>加载时机</td><td>页面加载时同步加载</td><td>等待整个页面加载完成后再加载</td></tr><tr><td>JavaScript 控制</td><td>支持通过 DOM 操作修改样式链接</td><td>不支持动态控制</td></tr><tr><td>兼容性</td><td>无兼容问题</td><td>CSS2.1 才有的语法，在 IE5+ 才能识别</td></tr><tr><td>性能</td><td>更快，有利于首屏渲染</td><td>相对较慢，可能造成样式延迟加载</td></tr></tbody></table><h2 id="transition和animation的区别" tabindex="-1">transition和animation的区别 <a class="header-anchor" href="#transition和animation的区别" aria-label="Permalink to &quot;transition和animation的区别&quot;">​</a></h2><h2 id="聊一聊盒模型" tabindex="-1">聊一聊盒模型 <a class="header-anchor" href="#聊一聊盒模型" aria-label="Permalink to &quot;聊一聊盒模型&quot;">​</a></h2><h2 id="css伪类和伪元素区别" tabindex="-1">CSS伪类和伪元素区别 <a class="header-anchor" href="#css伪类和伪元素区别" aria-label="Permalink to &quot;CSS伪类和伪元素区别&quot;">​</a></h2><h2 id="css预处理器" tabindex="-1">CSS预处理器 <a class="header-anchor" href="#css预处理器" aria-label="Permalink to &quot;CSS预处理器&quot;">​</a></h2><h2 id="如何清除在项目中无用的css代码呢" tabindex="-1">如何清除在项目中无用的css代码呢 <a class="header-anchor" href="#如何清除在项目中无用的css代码呢" aria-label="Permalink to &quot;如何清除在项目中无用的css代码呢&quot;">​</a></h2><h2 id="什么是-css-sprites" tabindex="-1">什么是 CSS Sprites? <a class="header-anchor" href="#什么是-css-sprites" aria-label="Permalink to &quot;什么是 CSS Sprites?&quot;">​</a></h2><h2 id="什么是bfc-它有什么作用" tabindex="-1">什么是BFC？它有什么作用？ <a class="header-anchor" href="#什么是bfc-它有什么作用" aria-label="Permalink to &quot;什么是BFC？它有什么作用？&quot;">​</a></h2><p><code>BFC(block formatting context）</code>：简单来说，BFC 就是一种属性，这种属性会影响着元素的定位以及与其兄弟元素之间的相互作用。</p><p>形成 BFC 的条件:</p><ol><li>浮动元素，float 除 none 以外的值；</li><li>绝对定位元素，position（absolute，fixed）；</li><li>display 为以下其中之一的值 inline-blocks，table-cells，table-captions；</li><li>overflow 除了 visible 以外的值（hidden，auto，scroll）</li></ol><p>BFC常见作用:</p><ol><li>包含浮动元素</li><li>不被浮动元素覆盖</li><li>BFC 会阻止外边距折叠 可解决margin塌陷问题</li></ol><h2 id="flex-1-是哪些属性组成的" tabindex="-1">flex:1 是哪些属性组成的 <a class="header-anchor" href="#flex-1-是哪些属性组成的" aria-label="Permalink to &quot;flex:1 是哪些属性组成的&quot;">​</a></h2><p>flex 实际上是 flex-grow、flex-shrink 和 flex-basis 三个属性的缩写。</p><ul><li>flex-grow：定义项目的的放大比例；</li><li>flex-shrink：定义项目的缩小比例；</li><li>flex-basis： 定义在分配多余空间之前，项目占据的主轴空间（main size），浏览器根据此属性计算主轴是否有多余空间。</li></ul><h2 id="rem、em、px有什么区别" tabindex="-1">rem、em、px有什么区别 <a class="header-anchor" href="#rem、em、px有什么区别" aria-label="Permalink to &quot;rem、em、px有什么区别&quot;">​</a></h2><p>这个很多人有个误解，em在设置自身字体大小的时候是相对于父元素的字体大小; 在用em设置其他属性单位的时候, 比如<code>width</code>，是相对于自身的字体属性大小, 只是很多时候自身字体属性是继承自父元素.</p>',25)])])}const m=d(l,[["render",r]]);export{b as __pageData,m as default};

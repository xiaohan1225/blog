import{_ as l,c as i,o as t,ae as e}from"./chunks/framework.DaakH-K9.js";const p=JSON.parse('{"title":"007 JavaScript函数式编程","description":"","frontmatter":{"title":"007 JavaScript函数式编程","date":"2021-11-10T00:00:00.000Z","categories":["JavaScript"],"tags":["函数式编程"],"sidebar":"auto"},"headers":[],"relativePath":"collect/javascript/js-base/007.md","filePath":"collect/javascript/js-base/007.md"}'),r={name:"collect/javascript/js-base/007.md"};function o(c,a,s,u,n,h){return t(),i("div",null,a[0]||(a[0]=[e('<h2 id="为什么要学习函数式编程" tabindex="-1">为什么要学习函数式编程？ <a class="header-anchor" href="#为什么要学习函数式编程" aria-label="Permalink to &quot;为什么要学习函数式编程？&quot;">​</a></h2><ul><li>首先，开发社区和各大软件公司都渐渐认识到函数式编程给其业务应用带来的好处。如今，大多数主流编程语言（如Scala、Java 8、 F#、Python和JavaScript等）等提供了原生的或基于API的函数式支持。</li><li>其次，在JavaScript的上下文中，函数式思想可以塑造非常优秀的语言特性，写出干净的、模块化的、可测试性、简洁的代码，提高开发效率。对于JavaScript为什么用函数式写法更加高效，一方面是由于对JavaScript语言的整体理解偏差，另一方面是JavaScript缺乏一些能够妥当地管理状态的原生结构，所以把管理状态的职责交给了开发人员（这也是程序中产生bug的原因之一）。在脚本代码规模较小时，这个问题还不明显，但随着代码量的不断增长，就会变得难以控制，而函数式编程，会在某种程度上，让你不受此问题的影响。</li><li>最后，通过使用一整套基于纯函数式的已被科学证明的技术与实践，即使复杂性日益提高，你也可以编写出易于推理和理解的代码。编写函数式的JavaScript，不仅能够提高整个应用程序的质量，也能够更好地了解并精通JavaScript语言本身。</li></ul><h2 id="函数式编程是什么" tabindex="-1">函数式编程是什么？ <a class="header-anchor" href="#函数式编程是什么" aria-label="Permalink to &quot;函数式编程是什么？&quot;">​</a></h2><ul><li>简单来说，函数式编程（FP）是一种强调以函数使用为主的软件开发风格。</li><li>函数式编程的目标是使用函数来<strong>抽象作用在数据之上的控制流与操作</strong>，从而在系统中<strong>消除副作用</strong>并<strong>减少对状态的改变</strong>。</li></ul><blockquote><p>函数式编程不是一种具体的工具，而是一种编写代码的方式。因此，你既可以用它来编写客户端（基于浏览器的）程序，也可以用它来编写服务器端的应用程序（如Node.js）。</p></blockquote><h2 id="函数式编程的好处" tabindex="-1">函数式编程的好处 <a class="header-anchor" href="#函数式编程的好处" aria-label="Permalink to &quot;函数式编程的好处&quot;">​</a></h2><ul><li>可以抛弃this（this的缺点：this提供了超出当前作用域的数据访问能力，有副作用，而且也不方便进行类型推断）</li><li>tree shaking友好</li><li>提高可测试性、方便并行处理</li><li>可缓存</li></ul><h2 id="函数式编程的javascript" tabindex="-1">函数式编程的Javascript <a class="header-anchor" href="#函数式编程的javascript" aria-label="Permalink to &quot;函数式编程的Javascript&quot;">​</a></h2><ul><li>函数是一等公民：JavaScript设计之初，借鉴了Scheme语言，将函数提升到<code>一等公民</code>的地位，也就意味着函数可以作为像它的数据类型一样赋值给变量、作为函数参数和函数的返回值。</li><li>高阶函数：函数参数为参数或者返回值为参数的函数。</li><li>闭包：函数与函数声明的的上下文绑定在一起的数据结构叫做闭包，也可以说是围绕函数定义的<strong>静态作用域</strong>。</li></ul><h2 id="函数式编程基础" tabindex="-1">函数式编程基础 <a class="header-anchor" href="#函数式编程基础" aria-label="Permalink to &quot;函数式编程基础&quot;">​</a></h2><h3 id="纯函数" tabindex="-1">纯函数 <a class="header-anchor" href="#纯函数" aria-label="Permalink to &quot;纯函数&quot;">​</a></h3><ul><li>概念 <ul><li>相同的输入永远会得到相同的输出</li></ul></li><li>好处 <ul><li>可缓存：因为纯函数对相同的输入始终有相同的结果，所以可以把纯函数的结果缓存起来</li><li>可测试：纯函数让测试更方便</li><li>并行处理</li><li>在多线程环境下并行操作共享的内存数据很可能会出现意外情况，而纯函数不需要访问共享的内存数据，所以在并行环境下可以任意运行纯函数 (Web Worker)</li></ul></li><li>副作用 <ul><li>没有任何可观察的副作用</li><li>副作用会让一个函数变的不纯，如果函数依赖于外部的状态就无法保证输出相同，就会带来副作用</li></ul></li></ul><h3 id="柯里化" tabindex="-1">柯里化 <a class="header-anchor" href="#柯里化" aria-label="Permalink to &quot;柯里化&quot;">​</a></h3><ul><li>当一个函数有多个参数的时候先传递一部分参数调用它（这部分参数以后永远不变）</li><li>然后返回一个新的函数接收剩余的参数，返回结果</li></ul><h3 id="函数组合" tabindex="-1">函数组合 <a class="header-anchor" href="#函数组合" aria-label="Permalink to &quot;函数组合&quot;">​</a></h3><ul><li>纯函数和柯里化很容易写出洋葱代码h(g(f(x))) <ul><li>获取数组的最后一个元素再转化成大写字母 .toUpper(.first(_.reverse(array)))</li></ul></li><li>函数组合可以让我们把细粒度的函数重新组合生成一个新的函数 <ul><li>默认从右往左</li></ul></li><li>管道 <ul><li>函数就像是数据的管道，函数组合就是把这些管道连接起来，让数据穿过多个管道形成最终结果</li></ul></li><li>Point Free <ul><li>不需要指明处理的数据</li><li>只需要合成运算过程</li><li>需要定义一些辅助的基本运算函数</li></ul></li></ul><h3 id="functor-函子" tabindex="-1">Functor(函子) <a class="header-anchor" href="#functor-函子" aria-label="Permalink to &quot;Functor(函子)&quot;">​</a></h3><ul><li>容器：包含值和值的变形关系(这个变形关系就是函数)</li><li>函子：是一个特殊的容器，通过一个普通的对象来实现，该对象具有 map 方法，map 方法可以运行一个函数对值进行处理(变形关系)</li></ul>',18)]))}const b=l(r,[["render",o]]);export{p as __pageData,b as default};
